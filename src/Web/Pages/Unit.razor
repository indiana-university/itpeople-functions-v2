@using Models
@using Models.Enums
@using RivetBlazor.Components
@using web.Shared
@using System.Net
@using System.Linq
@using System.Collections
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@implements IDisposable
@page "/Units/{unitId}"

<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<AuthenticatedView>
		<NotAuthenticated>
			<p>
				You must login to view this resource.
			</p>
			<p>
				<a class="rvt-button" href="/SignIn?Destination=/Units">Log In</a>
			</p>
		</NotAuthenticated>
		<Authenticated>
			<div class="rvt-bg-white rvt-p-tb-lg rvt-m-bottom-xxl" style="max-width: 1440px; margin: auto;">
				<div style="display: flex; justify-content: space-between; float: right;">
					@if (CrudPerms.HasFlag(EntityPermissions.Delete))
					{
						<a class="rvt-button rvt-button--danger rvt-m-right-xs" href="/Units/TODO" title="Delete Unit">
							<rvt-icon name="trash"></rvt-icon>
							<span class="rvt-sr-only">Delete Unit</span>
						</a>
						@if (PageUnit.Active)
						{
							<a class="rvt-button rvt-m-right-xs" href="/Units/TODO" title="Archive Unit">
								<rvt-icon name="lock-closed"></rvt-icon>
							</a>
						}
						else
						{
							<a class="rvt-button rvt-m-right-xs" href="/Units/TODO" title="Unarchive Unit">
								<rvt-icon name="lock-open"></rvt-icon>
							</a>
						}
						<a class="rvt-button" href="/Units/TODO">
							<rvt-icon name="pencil"></rvt-icon>
						</a>
					}
				</div>
				<h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">
					@PageUnit.Name
				</h1>
				<section class="">
					@if (string.IsNullOrWhiteSpace(PageUnit.Description) == false)
					{
						<div class="group-describer rvt-m-top-sm">
							<span>Endpoint Management Services,  Log-Alert Administration, Windows Hosted Environment</span>
						</div>
					}
					@if (string.IsNullOrWhiteSpace(PageUnit.Email) == false)
					{
						<div class="rvt-grid">
							<a href="mailto:sct2@iu.edu" class="rvt-button rvt-button--secondary rvt-m-left-xs rvt-m-top-md">Contact</a>
						</div>
					}
				</section>
				<DisplayException Ex=@GeneralException />
			</div>
			<div class="rvt-bg-white rvt-p-tb-xxl">
				<div class="rvt-container" style="max-width: 1440px; margin: auto;">
					<div class="rvt-grid">
						<div class="rvt-grid__item-6-lg-up">
							<section class="">
								<div class="rvt-grid">
									<div class="rvt-grid__item">

										@if (UnitMembers.Count() > 0)
										{
											foreach (var role in new List<Role> { Role.Leader, Role.Sublead, Role.Member, Role.Related })
											{
												if (UnitMembers.Any(m => m.Role == role))
												{
													<section class="rvt-m-bottom-lg">
														<h3 class="rvt-ts-20 rvt-ts-26-lg-up rvt-m-bottom-sm rvt-text-bold">@role.ToString() (@UnitMembers.Count(m => m.Role == role))</h3>
														<div class="list-dividers list-dividers--show-last">
															<div>
																<div class="rvt-grid">
																	<div class="rvt-grid__item" style="align-self: center;">
																		<a href="/people/1002" data-modal-trigger="modal-edit-person" class="rvt-m-bottom-remove person-list-item-new-name rvt-text-bold rvt-m-bottom-sm rvt-ts-18">
																			<span class="viewIcons delFaceName _delete fl">Jason Tratta</span>
																		</a>
																		<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">JAMF Lead</p>
																	</div>
																</div>
															</div>
														</div>
													</section>
												}
											}
										}

									</div>
								</div>
							</section>
						</div>
						<div class="rvt-grid__item--last rvt-grid__item-5-lg-up">
							<div class="rvt-m-bottom-lg">
								<div class="rvt-collapsible rvt-collapsible--panel">
									<h3 class="rvt-collapsible__title">
										<button type="button" aria-expanded="true">
											<svg aria-hidden="true" role="img" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
												<path fill="currentColor" d="M5.5,15a1,1,0,0,1-.77-1.64L9.2,8,4.73,2.64A1,1,0,0,1,6.27,1.36L11.13,7.2a1.25,1.25,0,0,1,0,1.61L6.27,14.64A1,1,0,0,1,5.5,15ZM9.6,8.48h0Zm0-1h0Z"></path>
											</svg>
											<span>Parent and Children</span>
										</button>
									</h3>
									<div class="rvt-collapsible__content">
										<div class="rvt-m-all-remove">
											<div>
												<div class="rvt-m-bottom-xl">
													<div class="rvt-grid">
														<div class="rvt-grid__item-2-sm-up">
															<svg width="100%" height="35" viewBox="0 0 41 35" fill="none" xmlns="http://www.w3.org/2000/svg">
																<g clip-path="url(#clip0)">
																	<rect width="41" height="35"></rect>
																	<rect x="15.3528" y="0.5" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
																	<rect x="15.3528" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																	<rect x="30.2056" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																	<rect x="0.5" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																	<line x1="20.0001" y1="23.71" x2="20.0001" y2="11.2905" stroke="black"></line>
																	<path d="M35.585 24.1118V16.334H5.4151V24.1118" stroke="black"></path>
																</g>
																<defs>
																	<clipPath id="clip0">
																		<rect width="41" height="35" fill="white"></rect>
																	</clipPath>
																</defs>
															</svg>
														</div>
														<div class="rvt-grid__item">
															<a href="/units/21" class="rvt-m-bottom-remove related-group-item-name rvt-text-bold">Client Services</a>
														</div>
													</div>
												</div>
											</div>
											<div class="rvt-grid">
												<div class="rvt-grid__item-2-sm-up">
													<svg width="100%" height="35" viewBox="0 0 41 35" fill="none" xmlns="http://www.w3.org/2000/svg">
														<g clip-path="url(#clip0)">
															<rect width="41" height="35"></rect>
															<rect x="15.3528" y="0.5" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
															<rect x="15.3528" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
															<rect x="30.2056" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
															<rect x="0.5" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
															<line x1="20.0001" y1="23.71" x2="20.0001" y2="11.2905" stroke="black"></line>
															<path d="M35.585 24.1118V16.334H5.4151V24.1118" stroke="black"></path>
														</g>
														<defs>
															<clipPath id="clip0"><rect width="41" height="35" fill="white"></rect></clipPath>
														</defs>
													</svg>
												</div>
												<div class="rvt-grid__item">
													<div class="related-group rvt-m-bottom-md" id="user-research">
														<a href="/units/446" class="rvt-m-bottom-remove related-group-item-name rvt-text-bold">Endpoint Management Services</a>
														<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">
															Windows device management through SCCM/MECM
															Apple device management through jamf
															Mobile Device Management with Airwatch
														</p>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="rvt-bg-white rvt-p-tb-lg rvt-m-bottom-xxl" style="max-width: 1440px; margin: auto;">
				<div class="row">

				</div>
			</div>

			@*@if(UnitMembers.Count() > 0)
				{
					<h2 class="rvt-ts-md">Leaders (TODO)</h2>
					<div class="rvt-grid">
						@foreach(var unit in MyUnits)
						{
							<div class="rvt-grid__item-5-md-up rvt-p-bottom-lg">
								<a class="rvt-link-bold" href="/units/@unit.Id">@unit.Name</a>
								<p class="rvt-m-top-remove">@unit.Description</p>
							</div>
						}
					</div>
				}*@

		</Authenticated>
	</AuthenticatedView>
</div>

@code {
	private HttpClient Api() => ClientFactory.CreateClient("Api");
	private UnitResponse PageUnit = new UnitResponse();
	private List<UnitMemberResponse> UnitMembers = new List<UnitMemberResponse>();
	private AuthenticatedUser LoggedInUser;
	private EntityPermissions CrudPerms;
	private Exception GeneralException;

	[Parameter]
	public string UnitId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		LoggedInUser = await sessionStorage.GetItemAsync<AuthenticatedUser>("user");
		if (LoggedInUser != null)
		{
			// Fetch my units and the whole list of units simultaneously.
			await Task.WhenAll(new[] { FetchUnit(), FetchUnitMembers() });
		}
	}

	private async Task FetchUnit()
	{
		var resp = await Api().GetAsync($"/Units/{UnitId}");
		if (resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch Unit.");
			return;
		}
		PageUnit = await resp.Content.ReadFromJsonAsync<UnitResponse>();
		GetEntityPermissions(resp);
	}
	private async Task FetchUnitMembers()
	{

		var resp = await Api().GetAsync($"/Units/{UnitId}/members");
		if (resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch Unit Members");
			return;
		}

		var stringResult = await resp.Content.ReadAsStringAsync();
		UnitMembers = JsonConvert.DeserializeObject<List<UnitMemberResponse>>(stringResult, Json.JsonSerializerSettings);
		//TODO GetEntityPermissions(resp);

	}

	private void GetEntityPermissions(HttpResponseMessage resp)
	{
		// Pluck the user permissions from the response header. Eg. "GET, PUT"
		var permsString = resp.Headers.SingleOrDefault(h => h.Key == "x-user-permissions").Value?.Single();

		// Loop over the string values from the header, parse them one-by-one, and build-up CrudPerms
		CrudPerms = 0;// Reset permissions to 0.
		foreach (var p in permsString.Split(','))
		{
			var ep = Enum.Parse<EntityPermissions>(p.Trim(), true);
			CrudPerms |= ep;
		}
	}

	public void Dispose() { }
}