@using Models
@using Models.Enums
@using RivetBlazor.Components
@using web.Shared
@using System.Net
@using System.Linq
@using System.Collections
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@implements IDisposable
@page "/Units/{unitId}"

<div>
	<AuthenticatedView>
		<NotAuthenticated>
			<div class="rvt-bg-white rvt-p-tb-lg rvt-m-bottom-sm">
				<div class="rvt-container" style="max-width: 1440px; margin: auto;">
					<p>
						You must login to view this resource.
					</p>
					<p>
						<a class="rvt-button" href="/SignIn?Destination=/Units">Log In</a>
					</p>
				</div>
			</div>
		</NotAuthenticated>
		<Authenticated>
			<div class="rvt-bg-white rvt-p-tb-lg rvt-m-bottom-sm">
				<div class="rvt-container" style="max-width: 1440px; margin: auto;">
					<div style="display: flex; justify-content: space-between; float: right;">
						@if (CrudPerms.HasFlag(EntityPermissions.Delete))
						{
							<a class="rvt-button rvt-button--danger rvt-m-right-xs" href="/Units/TODO" title="Delete Unit">
								<rvt-icon name="trash"></rvt-icon>
								<span class="rvt-sr-only">Delete Unit</span>
							</a>
							@if (PageUnit.Active)
							{
								<a class="rvt-button rvt-m-right-xs" href="/Units/TODO" title="Archive Unit">
									<rvt-icon name="lock-closed"></rvt-icon>
								</a>
							}
							else
							{
								<a class="rvt-button rvt-m-right-xs" href="/Units/TODO" title="Unarchive Unit">
									<rvt-icon name="lock-open"></rvt-icon>
								</a>
							}
							<a class="rvt-button" href="/Units/TODO">
								<rvt-icon name="pencil"></rvt-icon>
							</a>
						}
					</div>
					<h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">
						@PageUnit.Name
					</h1>
					<section class="">
						@if (string.IsNullOrWhiteSpace(PageUnit.Description) == false)
						{
							<div class="group-describer rvt-m-top-sm">
								<span>@PageUnit.Description</span>
							</div>
						}
						<div class="rvt-grid">
							@if (string.IsNullOrWhiteSpace(PageUnit.Url) == false)
							{
								<a href="@PageUnit.Url" class="rvt-button rvt-button--secondary rvt-m-left-xs rvt-m-top-md">Visit Website</a>
							}
							@if (string.IsNullOrWhiteSpace(PageUnit.Email) == false)
							{
								<a href="mailto:sct2@iu.edu" class="rvt-button rvt-button--secondary rvt-m-left-xs rvt-m-top-md">Contact</a>
							}
						</div>
					</section>
					<DisplayException Ex=@GeneralException />
				</div>
			</div>
			<div class="rvt-bg-white rvt-p-tb-sm">
				<div class="rvt-container" style="max-width: 1440px; margin: auto;">
					<div class="rvt-grid">
						<div class="rvt-grid__item-6-lg-up">
							<section class="">
								<div class="rvt-grid">
									<div class="rvt-grid__item">
										@if (UnitMembers.Count() > 0)
										{
											@foreach (var role in new List<Role> { Role.Leader, Role.Sublead, Role.Member, Role.Related })
											{
												@if (UnitMembers.Any(m => m.Role == role))
												{
													<section class="rvt-m-bottom-lg">
														<h3 class="rvt-ts-20 rvt-ts-26-lg-up rvt-text-bold">@role.ToString() (@UnitMembers.Count(m => m.Role == role))</h3>
														@foreach (var member in UnitMembers.Where(m => m.Role == role))
														{
															<div class="rvt-grid">
																<div class="rvt-grid__item rvt-border-bottom rvt-p-all-md" style="align-self: center;">
																	<a href="/people/@member.Person.Id" data-modal-trigger="modal-edit-person" class="rvt-m-bottom-remove person-list-item-new-name rvt-text-bold rvt-m-bottom-sm rvt-ts-18">
																		<span class="viewIcons delFaceName _delete fl">@member.Person.Name</span>
																	</a>
																	<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">
																		@member.Title
																		@if (member.Percentage != 100)
																		{
																			<span style="padding-left:0.25rem">@member.Percentage% </span>
																		}
																	</p>
																</div>
															</div>
														}
													</section>
												}
											}
										}
									</div>
								</div>
							</section>
						</div>
						<div class="rvt-grid__item--last rvt-grid__item-5-lg-up">
							@if (PageUnit.Parent != null || UnitChildren.Count > 0)
							{
								<Collapse>
									<Title>Parent and Children</Title>
									<Content>
										@if (PageUnit.Parent != null)
										{
											<div>
												<div class="rvt-m-bottom-xl">
													<div class="rvt-grid">
														<div class="rvt-grid__item-2-sm-up">
															<svg width="100%" height="35" viewBox="0 0 41 35" fill="none" xmlns="http://www.w3.org/2000/svg">
																<g clip-path="url(#clip0)">
																	<rect width="41" height="35"></rect>
																	<rect x="15.3528" y="0.5" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
																	<rect x="15.3528" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																	<rect x="30.2056" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																	<rect x="0.5" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																	<line x1="20.0001" y1="23.71" x2="20.0001" y2="11.2905" stroke="black"></line>
																	<path d="M35.585 24.1118V16.334H5.4151V24.1118" stroke="black"></path>
																</g>
																<defs>
																	<clipPath id="clip0">
																		<rect width="41" height="35" fill="white"></rect>
																	</clipPath>
																</defs>
															</svg>
														</div>
														<div class="rvt-grid__item">
															<a href="/units/@PageUnit.Parent.Id" class="rvt-m-bottom-remove related-group-item-name rvt-text-bold">@PageUnit.Parent.Name</a>
															@if (string.IsNullOrWhiteSpace(PageUnit.Parent.Description))
															{
																<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">
																	@PageUnit.Parent.Description
																</p>
															}
														</div>
													</div>
												</div>
											</div>
										}
										@if (UnitChildren.Count > 0)
										{
											@foreach (var child in UnitChildren)
											{
												<div class="rvt-grid">
													<div class="rvt-grid__item-2-sm-up">
														<svg width="100%" height="35" viewBox="0 0 41 35" fill="none" xmlns="http://www.w3.org/2000/svg">
															<g clip-path="url(#clip0)">
																<rect width="41" height="35"></rect>
																<rect x="15.3528" y="0.5" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																<rect x="15.3528" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
																<rect x="30.2056" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
																<rect x="0.5" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
																<line x1="20.0001" y1="23.71" x2="20.0001" y2="11.2905" stroke="black"></line>
																<path d="M35.585 24.1118V16.334H5.4151V24.1118" stroke="black"></path>
															</g>
															<defs>
																<clipPath id="clip0"><rect width="41" height="35" fill="white"></rect></clipPath>
															</defs>
														</svg>
													</div>
													<div class="rvt-grid__item">
														<div class="related-group rvt-m-bottom-md" id="user-research">
															<a href="/units/@child.Id" class="rvt-m-bottom-remove related-group-item-name rvt-text-bold">@child.Name</a>
															@if (string.IsNullOrWhiteSpace(child.Description))
															{
																<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">
																	@child.Description
																</p>
															}
														</div>
													</div>
												</div>
											}
										}
									</Content>
								</Collapse>
							}
							@if (SupportRelationships.Count > 0)
							{
								<Collapse>
									<Title>Supported Departments</Title>
									<Content>
										<ul class="rvt-list rvt-plain-list">
											@foreach (var supportRelationship in SupportRelationships)
											{
												<li>
													<a href="/departments/@supportRelationship.DepartmentId">@supportRelationship.Department.Name</a>
													@if (supportRelationship.SupportType != null)
													{
														<div>
															<span style="font-size:smaller">@supportRelationship.SupportType.Name</span>
														</div>
													}
													@if (supportRelationship.Department.Description != null)
													{
														<div>
															<span style="font-size:smaller">@supportRelationship.Department.Description</span>
														</div>
													}
												</li>
											}
										</ul>
									</Content>
								</Collapse>
							}
							@if (BuildingRelationships.Count > 0)
							{
								<Collapse>
									<Title>Supported Buildings</Title>
									<Content>
										<ul class="rvt-list rvt-plain-list">
											@foreach (var buildingRelationship in BuildingRelationships)
											{
											<li>
												<a href="/departments/@buildingRelationship.BuildingId">@buildingRelationship.Building.Name (@buildingRelationship.Building.Code)</a>
												@if (string.IsNullOrWhiteSpace(buildingRelationship.Building.Address) == false || string.IsNullOrWhiteSpace(buildingRelationship.Building.City) == false)
												{
													<br />
													<span style="font-size:smaller">@string.Join(", ", buildingRelationship.Building.Address, buildingRelationship.Building.City)</span>
												}
											</li>
											}
										</ul>
									</Content>
								</Collapse>
							}
						</div>
					</div>
				</div>
			</div>
		</Authenticated>
	</AuthenticatedView>
</div>

@code {
	private HttpClient Api() => ClientFactory.CreateClient("Api");
	private UnitResponse PageUnit = new UnitResponse();
	private List<UnitMemberResponse> UnitMembers = new List<UnitMemberResponse>();
	private List<UnitResponse> UnitChildren = new List<UnitResponse>();
	private List<SupportRelationshipResponse> SupportRelationships = new List<SupportRelationshipResponse>();
	private List<BuildingRelationship> BuildingRelationships = new List<BuildingRelationship>();
	private AuthenticatedUser LoggedInUser;
	private EntityPermissions CrudPerms;
	private Exception GeneralException;
	[Parameter]
	public string UnitId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		LoggedInUser = await sessionStorage.GetItemAsync<AuthenticatedUser>("user");
		if (LoggedInUser != null)
		{
			await Task.WhenAll(new[] { FetchUnit(), FetchUnitMembers(), FetchUnitChildren(), FetchSupportRelationships(), FetchBuildingRelationships() });
		}
	}

	private async Task FetchUnit()
	{
		var resp = await Api().GetAsync($"/Units/{UnitId}");
		if (resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch Unit.");
			return;
		}
		PageUnit = await resp.Content.ReadFromJsonAsync<UnitResponse>();
		GetEntityPermissions(resp);
	}
	private async Task FetchUnitMembers()
	{
		var resp = await Api().GetAsync($"/Units/{UnitId}/members");
		if (resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch Unit Members");
			return;
		}
		var stringResult = await resp.Content.ReadAsStringAsync();
		UnitMembers = JsonConvert.DeserializeObject<List<UnitMemberResponse>>(stringResult, Json.JsonSerializerSettings);
		//TODO GetEntityPermissions(resp);
	}

	private async Task FetchUnitChildren()
	{
		var resp = await Api().GetAsync($"/Units/{UnitId}/children");
		if (resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch Children for this Unit");
			return;
		}
		UnitChildren = await resp.Content.ReadFromJsonAsync<List<UnitResponse>>();
	}

	private async Task FetchSupportRelationships()
	{
		var resp = await Api().GetAsync($"/Units/{UnitId}/supportedDepartments");
		if (resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch Supported Departments for this Unit");
			return;
		}
		SupportRelationships = await resp.Content.ReadFromJsonAsync<List<SupportRelationshipResponse>>();
	}
	private async Task FetchBuildingRelationships()
	{
		var resp = await Api().GetAsync($"/Units/{UnitId}/supportedBuildings");
		if (resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch Supported Buildings for this Unit");
			return;
		}
		BuildingRelationships = await resp.Content.ReadFromJsonAsync<List<BuildingRelationship>>();
	}
	private void GetEntityPermissions(HttpResponseMessage resp)
	{
		// Pluck the user permissions from the response header. Eg. "GET, PUT"
		var permsString = resp.Headers.SingleOrDefault(h => h.Key == "x-user-permissions").Value?.Single();

		// Loop over the string values from the header, parse them one-by-one, and build-up CrudPerms
		CrudPerms = 0;// Reset permissions to 0.
		foreach (var p in permsString.Split(','))
		{
			var ep = Enum.Parse<EntityPermissions>(p.Trim(), true);
			CrudPerms |= ep;
		}
	}

	public void Dispose() { }
}