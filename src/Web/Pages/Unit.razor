@using Models
@using Models.Enums
@using RivetBlazor.Components
@using web.Shared
@using System.Linq
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable
@page "/Units/{unitId}"
@inherits PageBase

<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<AuthenticatedView>
		<NotAuthenticated>
			<p>
				You must login to view this resource.
			</p>
			<p>
				<a class="rvt-button" href="/SignIn?Destination=/Units/@UnitId">Log In</a>
			</p>
		</NotAuthenticated>
		<Authenticated>
			<section class="rvt-p-bottom-xxl">
				<div style="display: flex; justify-content: space-between; float: right;">
					@if (UnitPermissions.HasFlag(EntityPermissions.Delete))
					{
						<a class="rvt-button rvt-button--danger rvt-m-right-xs" title="Delete Unit" @onclick="DeleteUnit">
							<rvt-icon name="trash"></rvt-icon>
							<span class="rvt-sr-only">Delete Unit</span>
						</a>
						@if (CurrentUnit.Active)
						{
							<a class="rvt-button rvt-m-right-xs" title="Archive Unit" @onclick="ToggleArchiveStatus">
								<rvt-icon name="lock-closed"></rvt-icon>
							</a>
						}
						else
						{
							<a class="rvt-button rvt-m-right-xs" title="Unarchive Unit" @onclick="ToggleArchiveStatus">
								<rvt-icon name="lock-open"></rvt-icon>
							</a>
						}
					}
					@if (UnitPermissions.HasFlag(EntityPermissions.Put) || UnitMembers.Any(m => m.Permissions.HasFlag(Models.UnitPermissions.ManageMembers) || m.Permissions.HasFlag(Models.UnitPermissions.ManageTools)))
					{
						<a class="rvt-button" href="/Units/@UnitId/Edit">
							<rvt-icon name="pencil"></rvt-icon>
						</a>
					}
				</div>
				<h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">
					@CurrentUnit.Name
				</h1>
				@if (string.IsNullOrWhiteSpace(CurrentUnit.Description) == false)
				{
					<div class="rvt-m-top-sm">
						<span>@CurrentUnit.Description</span>
					</div>
				}
				<div class="rvt-grid">
					@if (string.IsNullOrWhiteSpace(CurrentUnit.Url) == false)
					{
						<a href="@CurrentUnit.Url" class="rvt-button rvt-button--secondary rvt-m-left-xs rvt-m-top-md">Visit Website</a>
					}
					@if (string.IsNullOrWhiteSpace(CurrentUnit.Email) == false)
					{
						<a href="mailto:@CurrentUnit.Email" class="rvt-button rvt-button--secondary rvt-m-left-xs rvt-m-top-md">Contact</a>
					}
				</div>
				<DisplayException Ex=@GeneralException />
			</section>
			<Loader Loading="ShowLoader">
				<div class="rvt-grid">
					<div class="rvt-grid__item-6-lg-up">
						<section class="">
							<div class="rvt-grid">
								<div class="rvt-grid__item">
									@if (UnitMembers.Count() > 0)
									{
										@foreach (var role in new List<Role> { Role.Leader, Role.Sublead, Role.Member, Role.Related })
										{
											@if (UnitMembers.Any(m => m.Role == role))
											{
												<section class="rvt-m-bottom-lg">
													<h3 class="rvt-ts-20 rvt-ts-26-lg-up rvt-text-bold">@role.ToString() (@UnitMembers.Count(m => m.Role == role))</h3>
													@foreach (var member in UnitMembers.Where(m => m.Role == role))
													{
														<div class="rvt-grid">
															<div class="rvt-grid__item rvt-border-bottom rvt-p-all-md" style="align-self: center;">
																<a href="/people/@member.Person.Id" class="rvt-m-bottom-remove rvt-text-bold rvt-m-bottom-sm rvt-ts-18">
																	<span>@member.Person.Name</span>
																</a>
																<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">
																	@member.Title
																	@if (member.Percentage != 100)
																	{
																		<span style="padding-left:0.25rem">@member.Percentage% </span>
																	}
																</p>
															</div>
														</div>
													}
												</section>
											}
										}
									}
								</div>
							</div>
						</section>
					</div>
					<div class="rvt-grid__item--last rvt-grid__item-5-lg-up">
						@if (CurrentUnit.Parent != null || UnitChildren.Count > 0)
						{
							<Collapse>
								<Title>Parent and Children</Title>
								<Content>
									@if (CurrentUnit.Parent != null)
									{
										<div>
											<div class="rvt-m-bottom-xl">
												<div class="rvt-grid">
													<div class="rvt-grid__item-2-sm-up">
														<svg width="100%" height="35" viewBox="0 0 41 35" fill="none" xmlns="http://www.w3.org/2000/svg">
															<g clip-path="url(#clip0)">
																<rect width="41" height="35"></rect>
																<rect x="15.3528" y="0.5" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
																<rect x="15.3528" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																<rect x="30.2056" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																<rect x="0.5" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																<line x1="20.0001" y1="23.71" x2="20.0001" y2="11.2905" stroke="black"></line>
																<path d="M35.585 24.1118V16.334H5.4151V24.1118" stroke="black"></path>
															</g>
															<defs>
																<clipPath id="clip0">
																	<rect width="41" height="35" fill="white"></rect>
																</clipPath>
															</defs>
														</svg>
													</div>
													<div class="rvt-grid__item">
														<a href="/units/@CurrentUnit.Parent.Id" class="rvt-m-bottom-remove rvt-text-bold">@CurrentUnit.Parent.Name</a>
														@if (string.IsNullOrWhiteSpace(CurrentUnit.Parent.Description))
														{
															<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">
																@CurrentUnit.Parent.Description
															</p>
														}
													</div>
												</div>
											</div>
										</div>
									}
									@if (UnitChildren.Count > 0)
									{
										@foreach (var child in UnitChildren)
										{
											<div class="rvt-grid">
												<div class="rvt-grid__item-2-sm-up">
													<svg width="100%" height="35" viewBox="0 0 41 35" fill="none" xmlns="http://www.w3.org/2000/svg">
														<g clip-path="url(#clip0)">
															<rect width="41" height="35"></rect>
															<rect x="15.3528" y="0.5" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
															<rect x="15.3528" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
															<rect x="30.2056" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
															<rect x="0.5" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
															<line x1="20.0001" y1="23.71" x2="20.0001" y2="11.2905" stroke="black"></line>
															<path d="M35.585 24.1118V16.334H5.4151V24.1118" stroke="black"></path>
														</g>
														<defs>
															<clipPath id="clip0"><rect width="41" height="35" fill="white"></rect></clipPath>
														</defs>
													</svg>
												</div>
												<div class="rvt-grid__item">
													<div class="rvt-m-bottom-md">
														<a href="/units/@child.Id" class="rvt-m-bottom-remove rvt-text-bold">@child.Name</a>
														@if (string.IsNullOrWhiteSpace(child.Description))
														{
															<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">
																@child.Description
															</p>
														}
													</div>
												</div>
											</div>
										}
									}
								</Content>
							</Collapse>
						}
						@if (SupportRelationships.Count > 0)
						{
							<Collapse>
								<Title>Supported Departments</Title>
								<Content>
									<ul class="rvt-list rvt-plain-list">
										@foreach (var supportRelationship in SupportRelationships)
										{
											<li>
												<a href="/departments/@supportRelationship.DepartmentId">@supportRelationship.Department.Name</a>
												@if (supportRelationship.SupportType != null)
												{
													<div>
														<span style="font-size:smaller;">@supportRelationship.SupportType.Name</span>
													</div>
												}
												@if (supportRelationship.Department.Description != null)
												{
													<div>
														<span style="font-size:smaller;">@supportRelationship.Department.Description</span>
													</div>
												}
											</li>
										}
									</ul>
								</Content>
							</Collapse>
						}
						@if (BuildingRelationships.Count > 0)
						{
							<Collapse>
								<Title>Supported Buildings</Title>
								<Content>
									<ul class="rvt-list rvt-plain-list">
										@foreach (var buildingRelationship in BuildingRelationships)
										{
											<li>
												<a href="/departments/@buildingRelationship.BuildingId">@buildingRelationship.Building.Name (@buildingRelationship.Building.Code)</a>
												@if (string.IsNullOrWhiteSpace(buildingRelationship.Building.Address) == false || string.IsNullOrWhiteSpace(buildingRelationship.Building.City) == false)
												{
													<br />
													<span style="font-size:smaller;">@string.Join(", ", buildingRelationship.Building.Address, buildingRelationship.Building.City)</span>
												}
											</li>
										}
									</ul>
								</Content>
							</Collapse>
						}
					</div>
				</div>
			</Loader>
		</Authenticated>
	</AuthenticatedView>
</div>

@code {
	[Parameter]
	public string UnitId { get; set; }
	private UnitResponse CurrentUnit = new UnitResponse();
	private List<UnitMemberResponse> UnitMembers = new List<UnitMemberResponse>();
	private List<UnitResponse> UnitChildren = new List<UnitResponse>();
	private List<SupportRelationshipResponse> SupportRelationships = new List<SupportRelationshipResponse>();
	private List<BuildingRelationship> BuildingRelationships = new List<BuildingRelationship>();
	private EntityPermissions UnitPermissions;
	private bool ShowLoader = false;
	private IDisposable Loading() => new DisposableLoader(s => ShowLoader = s, StateHasChanged);

	protected override async Task OnInitializedAsync()
	{
		await SetLoggedInUser();
		if (LoggedInUser != null)
		{
			using (Loading())
			{
				await Task.WhenAll(new[] {
					GetUnit(),
					GetUnitMembers(),
					GetUnitChildren(),
					GetSupportRelationships(),
					GetBuildingRelationships()
				});
			}
		}
	}

	private async Task GetUnit()
	{
		var response = await Get<UnitResponse>($"/Units/{UnitId}");
		CurrentUnit = response.Value;
		UnitPermissions = response.Permissions;
	}
	private async Task GetUnitMembers()
	{
		var response = await Get<List<UnitMemberResponse>>($"/Units/{UnitId}/members");
		UnitMembers = response.Value;
	}

	private async Task GetUnitChildren()
	{
		var response = await Get<List<UnitResponse>>($"/Units/{UnitId}/children");
		UnitChildren = response.Value;
		//TODO set permissions?
	}

	private async Task GetSupportRelationships()
	{
		var response = await Get<List<SupportRelationshipResponse>>($"/Units/{UnitId}/supportedDepartments");
		SupportRelationships = response.Value;
		//TODO set permissions?
	}
	private async Task GetBuildingRelationships()
	{
		var response = await Get<List<BuildingRelationship>>($"/Units/{UnitId}/supportedBuildings");
		BuildingRelationships = response.Value;
		//TODO set permissions?
	}

	private async Task ToggleArchiveStatus()
	{
		var confirmMessage = $"Are you sure you want to {(CurrentUnit.Active ? "archive" : "unarchive")} {CurrentUnit.Name}? ";
		confirmMessage += (CurrentUnit.Active)
			? "All members will lose their assigned tools, and the unit will be listed as Archived."
			: "All members' assigned tools and relationships will be reactivated.";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			var deleteResponse = await Delete<UnitResponse>($"/units/{UnitId}/archive");
			CurrentUnit = deleteResponse.Value;
		}
	}

	private async Task DeleteUnit()
	{
		var confirmMessage = $"Are you sure you want to delete {CurrentUnit.Name}? This can't be undone.";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			var deleteResponse = await Delete<UnitResponse>($"/units/{UnitId}");
			CurrentUnit = deleteResponse.Value;
		}
		Navigation.NavigateTo("/units");
	}

	public void Dispose() { }
}