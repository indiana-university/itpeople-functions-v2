@using Models
@using Models.Enums
@using RivetBlazor.Components
@using web.Shared
@using System.Net
@using System.Linq
@using Newtonsoft.Json
@using System.Collections
@using System;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@inject IHttpClientFactory ClientFactory
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@implements IDisposable
@page "/People/{NetId}"

<HeaderNavBar Page="Profiles" CurrentPage=@ProfileName />
<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
    @if (ShowLoader)
    {
        <div class="rvt-flex rvt-items-center rvt-justify-center rvt-m-bottom-sm">
            <div class="rvt-loader" aria-label="Content loading"></div>
        </div>
    }
    else
    {
        <AuthenticatedView>
            <NotAuthenticated>
                <p>
                    You must login to view this resource.
                </p>
                <p>
                    <a class="rvt-button" href="/SignIn?Destination=/People">Log In</a>
                </p>
            </NotAuthenticated>
            <Authenticated>
            @if( UpdatedPerson != null)
            {
                @* @foreach (var person in People)
                { *@
                    <ProfileHeader>
                        <h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">@UpdatedPerson.Name</h1>
                        <div class="rvt-ts-26">@UpdatedPerson.Position</div>
                    </ProfileHeader>
                    <div class="rvt-bg-white">
                        <div class="rvt-container" style="max-width: 1440px; margin: auto;">
                            <div class="rvt-grid rvt-p-top-lg" data-testid="profile-page">                                                                
                                <ProfileContactInformation Title="Contact Information">
                                    <ChildContent>
                                    <div class="rvt-border-bottom rvt-m-bottom-lg rvt-p-bottom-lg">

                                        <div>
                                            @if (@UpdatedPerson.Location != null)
                                            {
                                                <div><strong>Location: </strong>@UpdatedPerson.Location</div>

                                            }
                                            <div><strong>Campus: </strong>@UpdatedPerson.Campus</div>
                                            <div><strong>Email: </strong><a href="mailto:@UpdatedPerson.CampusEmail">@UpdatedPerson.CampusEmail</a></div>
                                            <div><strong>Phone: </strong>@UpdatedPerson.CampusPhone</div>
                                            <div><strong>Department: </strong><a href="/departments/@UpdatedPerson.DepartmentId">@UpdatedPerson.Department.Name</a></div>
                                        </div>
                                    </div>
                                    <div class="rvt-border-bottom rvt-m-bottom-lg rvt-p-bottom-lg">

                                        <div>
                                            <div style="float: right;">
                                                <button type="button" title="Edit Responsibilities" class="rvt-button rvt-button--plain" data-modal-trigger="modal-form-r" @onclick=@(() => ResponsibilitiesInput = UpdatedPerson.Responsibilities)>
                                                    <rvt-icon name="pencil" />
                                                    <span class="rvt-m-left-xs rvt-sr-only">Edit Responsibilities</span>
                                                </button>
                                                <ModalForm Id="modal-form-r" Title="Edit Responsibilities" SubmitButtonText="Update" Item=@UpdatedPerson.Responsibilities OnSubmit=@UpdateResponsibilities @ref=form>
                                                    <RivetInputFlag @bind-Value="ResponsibilitiesInput" Description="Check all the relevant responsibilities performed"  Inline=@inline />
                                                </ModalForm>
                                            </div>
                                            <h2 class="rvt-ts-23 rvt-text-bold">Responsibilities</h2>
                                            <p>What kinds of work do you do on a day-to-day basis?</p>

                                                @foreach (var item in UpdatedPerson.Responsibilities.ToString().Split(',').Select(r => r.Trim()))
                                                {
                                                    <ul class="rvt-list rvt-plain-list">
                                                        <li>@GetEnumDisplayName(item)</li>
                                                    </ul>
                                                }
                                        </div>
                                    </div>
                                    <div class="rvt-border-bottom rvt-m-bottom-lg rvt-p-bottom-lg">
                                        <ProfileInterestsHelper Title="Edit Interests">
                                            <ChildContent>
                                            <div class="rvt-modal" id="modal-form-i" role="dialog" aria-labelledby="modal-form-i-title" aria-hidden="true" tabindex="-1" current="">
                                                <div class="rvt-modal__inner">
                                                    <header class="rvt-modal__header">
                                                        <h1 class="rvt-modal__title" id="modal-form-title">Edit Interests</h1>
                                                    </header>
                                                    <div class="rvt-modal__body">
                                                        <EditForm OnValidSubmit="UpdateInterests" EditContext="@FormContext">
                                                            <DataAnnotationsValidator />
                                                                    @if (isInterestEntered)
                                                                    {
                                                                        @foreach (var Interest in InterestList.Distinct())
                                                                        {
                                                                            <ul class="rvt-list rvt-inline-list">
                                                                                <li>
                                                                                    <span class="rvt-badge">@Interest
                                                                                        <button id="id_67b129" class="rvt-button rvt-button--plain rvt-p-all-xxs" title="remove" style="height: auto;" @onclick="@(e => RemoveInterests(Interest))">
                                                                                            <rvt-icon name="trash"></rvt-icon><span class="rvt-sr-only">trash</span>
                                                                                        </button>
                                                                                    </span>
                                                                                </li>
                                                                            </ul>
                                                                        }
                                                                    }
                                                                <div>
                                                                    <div class="rvt-input rvt-m-bottom-sm">
                                                                        <label for="modal-form-i" class="">Search</label>
                                                                        <input id="modal-form-i" type='text' onfocus="this.value=''" value=" " @oninput="(e) => {AddEnteredValue(e.Value.ToString());}"/>
                                                                    </div>
                                                                </div>
                                                                <div class="rvt-dropdown__menu" style="position: relative; padding: 0px;">
                                                                    <div>
                                                                        <button id="modal-form-i" class="rvt-button">@EnteredTerm </button>
                                                                    </div>
                                                                </div>
                                                        </EditForm>
                                                    </div>

                                                    <button type="button" class="rvt-button rvt-modal__close" data-modal-close="modal-form-i">
                                                        <span class="rvt-sr-only">Close</span>
                                                        <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                                                            <path fill="currentColor" d="M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z"/>
                                                        </svg>
                                                    </button>
                                                </div>
                                            </div>
                                            </ChildContent>
                                            <SubContent>
                                                <h2 class="rvt-ts-23 rvt-text-bold">Professional interests</h2>
                                                <p>What kinds of skills, technologies, or languages do you want to work with or learn about?</p>
                                                @foreach (var Interest in InterestList.Distinct())
                                                {
                                                    <ul class="rvt-list rvt-plain-list rvt-inline-list">
                                                        <li><span class="rvt-badge">@Interest</span></li>
                                                    </ul>
                                                }
                                            </SubContent> 
                                        </ProfileInterestsHelper>
                                    </div>                                                          
                                    </ChildContent>                                                                                                             
                                </ProfileContactInformation>
                                <ProfileUnitsHelper Title="IT Units">
                                    <ChildContent>
                                        @if (ProfileUnits.Count() >= 0)
                                        {
                                            @foreach (var unit in ProfileUnits)
                                            {
                                               <div class="rvt-border-bottom rvt-m-bottom-lg rvt-p-bottom-lg profile-units">
                                                    <div>
                                                        <Chevron Open=isExpanded>
                                                            <ChildContent>
                                                                <a href="/units/@unit.Id"><h2 class="rvt-ts-23 rvt-text-bold">@unit.Name</h2></a>
                                                                <div class="rvt-m-bottom-sm">@unit.Description</div>
                                                            </ChildContent>
                                                            <HidenContent>
                                                                @if (Memberships.Select(pu => pu.Title).FirstOrDefault() != null)
                                                                {
                                                                    <div><strong>Title: </strong>@Memberships.Select(pu => pu.Title).FirstOrDefault() </div>

                                                                }
                                                                <div><strong>Role: </strong>@Memberships.Select(pu => pu.Role).FirstOrDefault().ToString() </div>
                                                            </HidenContent>
                                                        </Chevron>
                                                    </div>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <p> No Units</p>

                                        }
                                    </ChildContent>

                                </ProfileUnitsHelper>
                            </div>
                        </div>
                    </div>
                @* } *@
                <DisplayException Ex=@GeneralException />
            }
            </Authenticated>
        </AuthenticatedView>
    }

</div>

@code {
    private EntityPermissions CrudPerms;
    private Exception GeneralException;
    private Exception ModalException;
    private AuthenticatedUser LoggedInUser;
    private Person UpdatedPerson = new Person();
    private List<Person> People = new List<Person>();
    private IEnumerable<UnitResponse> ProfileUnits = new List<UnitResponse>();
    private IEnumerable<UnitMemberResponse> Memberships = new List<UnitMemberResponse>();
    private string _PrevNetId = null;
    [Parameter] public string NetId { get; set; }
    public List<string> InterestList = new List<string>();
    private EditContext FormContext;
    private bool inline = false;
    private HttpClient Api() => ClientFactory.CreateClient("Api");
    private Responsibilities ResponsibilitiesInput;
    private ModalForm<Responsibilities> form;
    private HttpResponseMessage formResponse = null;

    private bool isExpanded = false;
    private bool isInterestEntered = false;
    private string EnteredTerm;
    private string ProfileName;
    protected bool ShowLoader = false;

    protected IDisposable Loading()
        => new DisposableLoader(s => ShowLoader = s, StateHasChanged);
    protected override async Task OnInitializedAsync()
    {
        FormContext = new EditContext(InterestList);
    }
    protected override async Task OnParametersSetAsync()
    {
        if(NetId != _PrevNetId)
        {
            using (Loading())
            {
                People = new List<Person>();
                await Task.WhenAll(new[] { GetPersonProfile(), GetPersonUnitMemberships() });
            }
        }
        _PrevNetId = NetId;
    }

    private async Task GetPersonProfile()
    {
        var response = await Api().GetAsync($"/people/{NetId}");
        if (response.IsSuccessStatusCode)
        {
            string responsemsg = await response.Content.ReadAsStringAsync();
            UpdatedPerson = JsonConvert.DeserializeObject<Person>(responsemsg, Json.JsonSerializerSettings);
            InterestList.AddRange(UpdatedPerson.Expertise.Split(","));
            @* UpdatedPerson.Responsibilities = personResponse.Responsibilities;
            UpdatedPerson.Expertise = personResponse.Expertise;  *@
            isInterestEntered = true;
            ProfileName = UpdatedPerson.Name;
            @* People.Add(personResponse); *@
        }
        else
        {
            GeneralException = new Exception($"Failed to fetch the person's details..");
            return;
        }
    }
    private async Task GetPersonUnitMemberships()
    {
        var response = await Api().GetAsync($"/people/{NetId}/memberships");
        if (response.IsSuccessStatusCode)
        {
            string responsemsg = await response.Content.ReadAsStringAsync();
            Memberships = JsonConvert.DeserializeObject<List<UnitMemberResponse>>(responsemsg, Json.JsonSerializerSettings);
            ProfileUnits = Memberships.Select(m => m.Unit).Distinct();
        }
        else
        {
            GeneralException = new Exception($"Failed to fetch UnitMemberships for {NetId}.");
            return;
        }
    }
    private async Task UpdateResponsibilities()
    {
        try
        {
            await UpdatePerson(UpdatedPerson);
        }
        catch (Exception ex)
        {
            ModalException = ex;
        }
        StateHasChanged();
    }
    public string GetEnumDisplayName(string enumValue)
    {
        var fieldInfo = UpdatedPerson.Responsibilities.GetType().GetFields();
        var field = fieldInfo.FirstOrDefault(f => f.Name == enumValue);
        return field != null ? field.GetCustomAttribute<DisplayAttribute>()?.GetName() ?? field.Name : enumValue;
    }
    private void AddEnteredValue(string Value)
    {
        EnteredTerm = Value;
        isInterestEntered = true;
    }
    private async Task RemoveInterests(string interest)
    {
        InterestList.Remove(interest);
    }
    private async Task UpdateInterests()
    {
        InterestList.Add(EnteredTerm);
        try
        {
            await UpdatePerson(UpdatedPerson);
        }
        catch (Exception ex)
        {
            ModalException = ex;
        }

        StateHasChanged();
    }

    private async Task UpdatePerson(Person member)
    {
        member.Responsibilities = ResponsibilitiesInput;

        if (member.Responsibilities.ToString().Split(',').Count() == 0 && member.Netid == NetId)
        {
            var postContent = new StringContent(JsonConvert.SerializeObject(member), System.Text.Encoding.UTF8, "application/json");
            formResponse = await Api().PostAsync($"/people/", postContent);
        }
        else if (member.Expertise.Split(',').Count() == 0 && member.Netid == NetId)
        {
            var postContent = new StringContent(JsonConvert.SerializeObject(member), System.Text.Encoding.UTF8, "application/json");
            formResponse = await Api().PostAsync($"/people/", postContent);
        }
        else if (member.Netid == NetId)
        {
            string memberOutput = JsonConvert.SerializeObject(member, Json.JsonSerializerSettings);
            var deserializedMember = JsonConvert.DeserializeObject<Person>(memberOutput, Json.JsonSerializerSettings);
            deserializedMember.Responsibilities = member.Responsibilities;
            deserializedMember.Expertise = InterestList.Aggregate((a, b) => a + ", " + b);
            
            var putContent = new StringContent(JsonConvert.SerializeObject(deserializedMember), System.Text.Encoding.UTF8, "application/json");
            formResponse = await Api().PutAsync($"/people/{deserializedMember.Id}", putContent);
        }
       

        if (formResponse.IsSuccessStatusCode == true)
        {
            Console.WriteLine($"Before .... update the updatedPerson ");

            string responsemsg = await formResponse.Content.ReadAsStringAsync();
            UpdatedPerson = JsonConvert.DeserializeObject<Person>(responsemsg, Json.JsonSerializerSettings);
            await form.Close();
            Console.WriteLine($"After .... update the updatedPerson ");

        }
    }

    public void Dispose() { }
}