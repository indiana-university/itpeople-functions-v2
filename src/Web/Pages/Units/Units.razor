@using Models
@using Models.Enums
@using RivetBlazor.Components
@using web.Shared
@using System.Net
@using System.Linq
@using System.Collections
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@implements IDisposable
@page "/Units"

<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	
	<div class="rvt-flex-md-up rvt-justify-space-between-lg-up">
		<!-- our title -->
		<div class="rvt-m-right-sm-md-up">
			<h1>Units</h1>
		</div>
		<!-- a place for buttons/actions to live -->
		<div class="rvt-bg-blue rvt-m-right-sm-md-up">
			@if(CrudPerms.HasFlag(EntityPermissions.Post))
			{
				<a class="rvt-button" href="/Units/Create">+ Add New Unit</a>
			}
		</div>
	</div>

	<AuthenticatedView>
		<NotAuthenticated>
			<p>
				You must login to view this resource.
			</p>
			<p>
				<a class="rvt-button" href="/SignIn?Destination=/Units">Log In</a>
			</p>
		</NotAuthenticated>
		<Authenticated>
			<p>
				IT Units are organizations of people doing IT work. Some IT Units are primarily responsible for departmental IT support, while others are principally engaged in IT service development and delivery.
			</p>

			<p>
				Use the search bar to find people or units doing IT work at IU.
			</p>

			<DisplayException Ex=@GeneralException />

			@if(MyUnits.Count() > 0)
			{
				<h2 class="rvt-ts-md">My Units</h2>
				<GridListItems Collection=@MyUnits LinkText=@(u => u.Name) LinkUri=@(u => $"/Units/{u.Id}") Details=@(u => u.Description) />
			}

			@if(ActiveUnits.Count() > 0)
			{
				<h2 class="rvt-ts-md">Active Units</h2>
				<GridListItems Collection=@ActiveUnits LinkText=@(u => u.Name) LinkUri=@(u => $"/Units/{u.Id}") Details=@(u => u.Description) />
			}

			@if(ArchivedUnits.Count() > 0)
			{
				<h2 class="rvt-ts-md">Archived Units</h2>
				<GridListItems Collection=@ArchivedUnits LinkText=@(u => u.Name) LinkUri=@(u => $"/Units/{u.Id}") Details=@(u => u.Description) Archived=@(u => !u.Active) />
			}
		</Authenticated>
	</AuthenticatedView>
</div>

@code {
	private HttpClient Api() => ClientFactory.CreateClient("Api");
	private IEnumerable<UnitResponse> MyUnits = new List<UnitResponse>();
	private IEnumerable<UnitResponse> ActiveUnits = new List<UnitResponse>();
	private IEnumerable<UnitResponse> ArchivedUnits = new List<UnitResponse>();
	private AuthenticatedUser LoggedInUser;
	private EntityPermissions CrudPerms;
	private Exception GeneralException;
	
	protected override async Task OnInitializedAsync()
	{
		LoggedInUser = await sessionStorage.GetItemAsync<AuthenticatedUser>("user");
		if(LoggedInUser != null)
		{
			// Fetch my units and the whole list of units simultaneously.
			await Task.WhenAll(new[] { FetchMyUnits(), FetchUnits() });
		}
	}

	private async Task FetchMyUnits()
	{
		var resp = await Api().GetAsync($"/people/{LoggedInUser.Username}/memberships");
		//var resp = await Api().GetAsync($"/people/1/memberships");
		if(resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch UnitMemberships for {LoggedInUser.Username}.");
			return;
		}

		// The request succeeded, try to deserialize it.
		var stringResult = await resp.Content.ReadAsStringAsync();
		// We have to use Newtonsoft to make sure our StringEnumConverter work.
		var memberships = JsonConvert.DeserializeObject<List<UnitMemberResponse>>(stringResult, Json.JsonSerializerSettings);
		MyUnits = memberships.Select(m => m.Unit).Distinct();
	}

	private async Task FetchUnits()
	{
		var resp = await Api().GetAsync($"/Units");
		if(resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch Units.");
			return;
		}
		// Use Newtonsoft to deserialize for consistency's sake.
		var stringResult = await resp.Content.ReadAsStringAsync();
		var units = JsonConvert.DeserializeObject<List<UnitResponse>>(stringResult, Json.JsonSerializerSettings);
		
		ActiveUnits = units.Where(u => u.Active);
		ArchivedUnits = units.Where(u => u.Active == false);

		GetEntityPermissions(resp);
	}

	private void GetEntityPermissions(HttpResponseMessage resp)
	{
		// Pluck the user permissions from the response header. Eg. "GET, PUT"
		var permsString = resp.Headers.SingleOrDefault(h => h.Key == "x-user-permissions").Value?.Single();
		
		// Loop over the string values from the header, parse them one-by-one, and build-up CrudPerms
		CrudPerms = 0;// Reset permissions to 0.
		foreach(var p in permsString.Split(','))
		{
			var ep = Enum.Parse<EntityPermissions>(p.Trim(), true);
			CrudPerms |= ep;
		}
	}

	public void Dispose(){}
}