@using Models
@using Models.Enums
@using RivetBlazor.Components
@using web.Shared
@using System.Linq
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable
@inherits PageBase
@page "/Units/create"
@page "/Units/{unitId}"
@page "/Units/{unitId}/edit"

<Title Value="@GetPageTitle()" />
<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<nav role="navigation" aria-label="Breadcrumbs">
		<ol class="rvt-breadcrumbs rvt-m-bottom-lg">
			<li><a href="/"> Home </a></li>
			<li><a href="/Units"> Units </a></li>
			<li aria-current="page">@(CurrentUnit?.Name ?? UnitId)</li>
		</ol>
	</nav>
	<AuthenticatedView>
		<NotAuthenticated>
			<h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">Unit @UnitId</h1>
			<p>
				You must login to view this resource.
			</p>
			<p>
				<a class="rvt-button" href="/SignIn?Destination=/Units/@UnitId">Log In</a>
			</p>
		</NotAuthenticated>
		<Authenticated>
			<DisplayException Ex=@GeneralException />
			<Loader Loading="ShowLoader">
				@if (CreateMode)
				{
					<section class="rvt-p-bottom-xxl">
						<div class="rvt-border-bottom rvt-p-bottom-sm">
							<h1>Create</h1>
							<EditForm EditContext="@UnitEditContext">
								<RivetInputText @bind-Value="UnitToUpdate.Name" Label="Name" />
								<RivetInputTextArea @bind-Value="UnitToUpdate.Description" Label="Description" />
								<RivetInputText @bind-Value="UnitToUpdate.Url" Label="URL" />
								<RivetInputText @bind-Value="UnitToUpdate.Email" Label="Contact Email" />
								<button type="submit" class="rvt-button rvt-m-top-md" disabled="@(UnitFormInvalid || ShowLoader)" @onclick="CreateUnit">
									Create
								</button>
							</EditForm>
						</div>
					</section>
				}
				else if(CurrentUnit != null)
				{
					<section class="rvt-p-bottom-xxl">
						@if (EditMode == false)
						{
							<div style="display: flex; justify-content: space-between; float: right;">
								@if (CanEditUnitDetails || CanEditUnitMembers || CanEditMemberTools)
								{
									<a class="rvt-button rvt-m-right-xs" title="Edit Unit" href="/Units/@UnitId/Edit">
										<rvt-icon name="pencil"></rvt-icon>
									</a>
								}
								@if (CanDeleteUnit)
								{
									@if (CurrentUnit.Active)
									{
										<a class="rvt-button rvt-m-right-xs" title="Archive Unit" @onclick="ToggleArchiveStatus">
											<rvt-icon name="lock-closed"></rvt-icon>
										</a>
									}
									else
									{
										<a class="rvt-button rvt-m-right-xs" title="Unarchive Unit" @onclick="ToggleArchiveStatus">
											<rvt-icon name="lock-open"></rvt-icon>
										</a>
									}
									<a class="rvt-button rvt-button--danger" title="Delete Unit" @onclick="DeleteUnit">
										<rvt-icon name="trash"></rvt-icon>
										<span class="rvt-sr-only">Delete Unit</span>
									</a>
								}
							</div>
						}
						@if (EditMode && CanEditUnitDetails)
						{
							<div class="rvt-border-bottom rvt-p-bottom-sm">
								<h1>Edit</h1>
								<EditForm EditContext="@UnitEditContext">
									<RivetInputText @bind-Value="UnitToUpdate.Name" Label="Name" />
									<RivetInputTextArea @bind-Value="UnitToUpdate.Description" Label="Description" />
									<RivetInputText @bind-Value="UnitToUpdate.Url" Label="URL" />
									<RivetInputText @bind-Value="UnitToUpdate.Email" Label="Contact Email" />
									<button type="submit" class="rvt-button rvt-m-top-md" disabled="@(UnitFormInvalid || ShowLoader)" @onclick="UpdateUnit">
										Update
									</button>
									<a class="rvt-button rvt-button--danger" href="/Units/@CurrentUnit.Id">Cancel</a>
								</EditForm>
							</div>
						}
						@if (EditMode == false || CanEditUnitDetails == false)
						{
							<h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">
								@CurrentUnit.Name
								@if (CurrentUnit.Active == false)
								{
									<span class="rvt-inline-alert rvt-inline-alert--standalone rvt-inline-alert--info rvt-m-left-xs rvt-ts-xs">Archived</span>
								}
							</h1>
							@if (string.IsNullOrWhiteSpace(CurrentUnit.Description) == false)
							{
								<div class="rvt-m-top-sm">@CurrentUnit.Description</div>
							}
							<div class="rvt-grid">
								@if (string.IsNullOrWhiteSpace(CurrentUnit.Url) == false)
								{
									<a href="@CurrentUnit.Url" class="rvt-button rvt-button--secondary rvt-m-left-xs rvt-m-top-md">Visit Website</a>
								}
								@if (string.IsNullOrWhiteSpace(CurrentUnit.Email) == false)
								{
									<a href="mailto:@CurrentUnit.Email" class="rvt-button rvt-button--secondary rvt-m-left-xs rvt-m-top-md">Contact</a>
								}
							</div>
						}
					</section>
					<div class="rvt-grid">
						<div class="rvt-grid__item-6-lg-up">
							<div class="rvt-grid">
								<div class="rvt-grid__item">
									@if (CanEditUnitMembers && EditMode)
									{
										<section class="rvt-m-bottom-lg">
											<a href=@($"/Units/{UnitId}/AddMember") class="rvt-button rvt-button--plain" title="Add Person">
												<rvt-icon name="user-add"></rvt-icon>
												<span>&nbsp; Add member</span>
											</a>
										</section>
									}
									@foreach (var roleDescription in RoleDescriptions)
									{
										var role = roleDescription.Role;
										@if (EditMode || UnitMembers.Count(m => m.Role == role) > 0)
										{
											<section class="rvt-m-bottom-lg">
												<h3 class="rvt-ts-20 rvt-ts-26-lg-up rvt-text-bold">@role.ToString() (@UnitMembers.Count(m => m.Role == role))</h3>
												@if (EditMode)
												{
													<p>@roleDescription.Description</p>
												}
												@foreach (var member in UnitMembers.Where(m => m.Role == role))
												{
													<div class="rvt-p-all-sm">
														<div class="rvt-border-bottom rvt-p-bottom-sm">
															<div class="rvt-grid ">
																<div class="rvt-grid__item" style="align-self: center;">
																	<a href="/people/@member.Netid" class="rvt-m-bottom-remove rvt-text-bold rvt-m-bottom-sm rvt-ts-18">
																		<span>@member.Person.Name</span>
																	</a>
																	<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">
																		@member.Title
																		@if (member.Percentage != 100)
																		{
																			<span style="padding-left:0.25rem">@member.Percentage% </span>
																		}
																	</p>
																</div>

																<div class="rvt-grid__item rvt-text-right">
																	@if (CanEditMemberTools && EditMode)
																	{
																		<a href=@($"/Units/{UnitId}/EditMember/{member.Person.Netid}") class="rvt-button rvt-button--plain" title="Edit tool permissions for @member.Person.Name">
																			<rvt-icon name="pencil"></rvt-icon>
																			<span class="rvt-sr-only">Edit tool permissions for @member.Person.Name</span>
																		</a>
																	}
																	@if (CanEditUnitMembers && EditMode)
																	{
																		<button class="rvt-button rvt-button--plain" title="Remove @member.Person.Name" @onclick="@(async () => await RemoveMember(member))">
																			<rvt-icon name="trash"></rvt-icon>
																			<span class="rvt-sr-only">Remove @member.Person.Name</span>
																		</button>
																	}
																</div>
															</div>
														</div>
													</div>
												}
											</section>
										}
									}
								</div>
							</div>
						</div>
						<div class="rvt-grid__item--last rvt-grid__item-5-lg-up">
							@if (CurrentUnit.Parent != null || UnitChildren.Count > 0 || EditMode)
							{
								<Collapse>
									<Title>Parent and Children</Title>
									<Content>
										@if (CurrentUnit.Parent != null)
										{
											<div class="rvt-m-bottom-xl">
												<div class="rvt-grid">
													<div class="rvt-grid__item-2-sm-up">
														<svg width="100%" height="35" viewBox="0 0 41 35" fill="none" xmlns="http://www.w3.org/2000/svg">
															<g clip-path="url(#clip0)">
																<rect width="41" height="35"></rect>
																<rect x="15.3528" y="0.5" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
																<rect x="15.3528" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																<rect x="30.2056" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																<rect x="0.5" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
																<line x1="20.0001" y1="23.71" x2="20.0001" y2="11.2905" stroke="black"></line>
																<path d="M35.585 24.1118V16.334H5.4151V24.1118" stroke="black"></path>
															</g>
															<defs>
																<clipPath id="clip0">
																	<rect width="41" height="35" fill="white"></rect>
																</clipPath>
															</defs>
														</svg>
													</div>
													<div class="rvt-grid__item">
														<a href="/units/@CurrentUnit.Parent.Id" class="rvt-m-bottom-remove rvt-text-bold">@CurrentUnit.Parent.Name</a>
														@if (CurrentUnit.Parent.Active == false)
														{
															<span class="rvt-inline-alert--standalone rvt-inline-alert--info rvt-m-left-xs rvt-ts-xs">Archived</span>
														}
														@if (string.IsNullOrWhiteSpace(CurrentUnit.Parent.Description) == false)
														{
															<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">@CurrentUnit.Parent.Description</p>
														}
													</div>
												</div>
											</div>
										}
										@foreach (var child in UnitChildren)
										{
											<div class="rvt-grid">
												<div class="rvt-grid__item-2-sm-up">
													<svg width="100%" height="35" viewBox="0 0 41 35" fill="none" xmlns="http://www.w3.org/2000/svg">
														<g clip-path="url(#clip0)">
															<rect width="41" height="35"></rect>
															<rect x="15.3528" y="0.5" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
															<rect x="15.3528" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
															<rect x="30.2056" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
															<rect x="0.5" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
															<line x1="20.0001" y1="23.71" x2="20.0001" y2="11.2905" stroke="black"></line>
															<path d="M35.585 24.1118V16.334H5.4151V24.1118" stroke="black"></path>
														</g>
														<defs>
															<clipPath id="clip0"><rect width="41" height="35" fill="white"></rect></clipPath>
														</defs>
													</svg>
												</div>
												<div class="rvt-grid__item">
													<div class="rvt-m-bottom-md">
														<a href="/units/@child.Id" class="rvt-m-bottom-remove rvt-text-bold">@child.Name</a>
														@if (child.Active == false)
														{
															<span class="rvt-inline-alert--standalone rvt-inline-alert--info rvt-m-left-xs rvt-ts-xs">Archived</span>
														}
														@if (string.IsNullOrWhiteSpace(child.Description) == false)
														{
															<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">@child.Description</p>
														}
													</div>
												</div>
												@if (CanEditUnitChildren && EditMode)
												{
													<div class="rvt-grid__item rvt-text-right">
														<button class="rvt-button rvt-button--plain" title="Remove @child.Name" @onclick="@(async () => await RemoveChildUnit(child))">
															<rvt-icon name="trash"></rvt-icon>
															<span class="rvt-sr-only">Remove @child.Name</span>
														</button>
													</div>
												}
											</div>
										}
										@if (CanEditUnitChildren && EditMode)
										{
											<div class="rvt-grid rvt-p-top-sm">
												<div class="rvt-grid__item ">
													<h5 class="rvt-border-top rvt-p-top-sm">Add New Child Unit</h5>
													<EditForm EditContext="@ChildUnitAddContext">
														<SuggestionButtons T="@UnitResponse" Label="Child Unit" Placeholder="Enter a search term" Description="Search by unit name." ButtonClickedAction="@AddChildUnit" AsyncSuggestionGetter="@GetChildUnitSuggestions" DisplayLambda=@(s => s.Name) />
													</EditForm>
												</div>
											</div>
										}
									</Content>
								</Collapse>
							}
							@if (SupportRelationships.Count > 0 || EditMode)
							{
								<Collapse>
									<Title>Supported Departments</Title>
									<Content>
										<ul class="rvt-list rvt-plain-list">
											@foreach (var supportRelationship in SupportRelationships)
											{
												<li>
													<div class="rvt-grid">
														<div class="rvt-grid__item">
															<a href="/departments/@supportRelationship.DepartmentId">@supportRelationship.Department.Name</a>
														</div>
														@if (CanEditSupportRelationships && EditMode)
														{
															<div class="rvt-grid__item rvt-text-right" style="flex-grow: 0; min-width: 50px; text-align: right;">
																<button class="rvt-button rvt-button--plain" title="Remove @supportRelationship.Department.Name" @onclick="@(async () => await RemoveSupportRelationship(supportRelationship))">
																	<rvt-icon name="trash"></rvt-icon>
																	<span class="rvt-sr-only">Remove @supportRelationship.Department.Name</span>
																</button>
															</div>
														}
													</div>
													<div class="rvt-grid">
														<div class="rvt-grid__item">
															@if (supportRelationship.SupportType != null)
															{
																<div style="font-size:smaller;">@supportRelationship.SupportType.Name</div>
															}
															@if (supportRelationship.Department.Description != null)
															{
																<div style="font-size:smaller;">@supportRelationship.Department.Description</div>
															}
														</div>
													</div>
												</li>
											}
										</ul>
										@if (CanEditSupportRelationships && EditMode)
										{
											<div class="rvt-grid rvt-p-top-sm">
												<div class="rvt-grid__item ">
													<h5 class="rvt-border-top rvt-p-top-sm">Add New Supported Department</h5>
													<EditForm EditContext="@SupportRelationshipAddContext">
														<RivetInputSelect @bind-Value="SupportRelationshipToAdd.SupportType" Label="Support Type" Description="" Options=SupportTypes DisplayLambda=@(r => r.Name) />
														@if(SupportRelationshipToAdd.DepartmentId == 0) {
															<SuggestionButtons T="@SupportRelationshipResponse" Label="Department" Placeholder="Enter a search term" Description="Search by department name." ButtonClickedAction="@SelectSupportDepartment" AsyncSuggestionGetter="@GetSupportRelationshipSuggestions" DisplayLambda=@(s => s.Department.Name) />
														}
														@if(SupportRelationshipToAdd.DepartmentId != 0) {
															<p>
																<span class="rvt-badge">
																	@SupportRelationshipToAdd.Department.Name
																	<button type="button" class="rvt-button rvt-button--plain rvt-p-all-xxs" title="remove" style="height: auto;" @onclick="@(()=> ClearAddingSupportDepartment())">
																		<rvt-icon name="trash"></rvt-icon><span class="rvt-sr-only">trash</span>
																	</button>
																</span>
															</p>
														}
														<button type="submit" class="rvt-button rvt-m-top-md" disabled="@(ShowLoader)" @onclick="AddSupportRelationship">
															Add
														</button>
													</EditForm>
												</div>
											</div>
										}
									</Content>
								</Collapse>
							}
							@if (BuildingRelationships.Count > 0 || EditMode)
							{
								<Collapse>
									<Title>Supported Buildings</Title>
									<Content>
										<ul class="rvt-list rvt-plain-list">
											@foreach (var buildingRelationship in BuildingRelationships)
											{
												<li>
													<div class="rvt-grid">
														<div class="rvt-grid__item">
															<a href="/buildings/@buildingRelationship.BuildingId">@buildingRelationship.Building.Name (@buildingRelationship.Building.Code)</a>
														</div>
														@if (CanEditBuildingRelationships && EditMode)
														{
															<div class="rvt-grid__item rvt-text-right" style="flex-grow: 0; min-width: 50px; text-align: right;">
																<button class="rvt-button rvt-button--plain" title="Remove @buildingRelationship.Building.Name (@buildingRelationship.Building.Code" @onclick="@(async () => await RemoveBuildingRelationship(buildingRelationship))">
																	<rvt-icon name="trash"></rvt-icon>
																	<span class="rvt-sr-only">Remove @buildingRelationship.Building.Name (@buildingRelationship.Building.Code)</span>
																</button>
															</div>
														}
													</div>
													@if (string.IsNullOrWhiteSpace(buildingRelationship.Building.Address) == false || string.IsNullOrWhiteSpace(buildingRelationship.Building.City) == false)
													{
														<div class="rvt-grid">
															<div class="rvt-grid__item">
																<span style="font-size:smaller;">@string.Join(", ", buildingRelationship.Building.Address, buildingRelationship.Building.City)</span>
															</div>
														</div>
													}
												</li>
											}
										</ul>
										@if (CanEditBuildingRelationships && EditMode)
										{
											<div class="rvt-grid rvt-p-top-sm">
												<div class="rvt-grid__item ">
													<h5 class="rvt-border-top rvt-p-top-sm">Add New Supported Building</h5>
													<EditForm EditContext="@BuildingRelationshipAddContext">
														<SuggestionButtons T="@Building" Label="Search" Placeholder="Enter a search term" Description="Search by building name, code, or address." ButtonClickedAction="@AddBuildingRelationship" AsyncSuggestionGetter="@GetBuildingRelationshipSuggestions" DisplayLambda=@BuildingRelationshipDisplayLamba />
													</EditForm>
												</div>
											</div>
										}
									</Content>
								</Collapse>
							}
						</div>
					</div>
				}
			</Loader>
		</Authenticated>
	</AuthenticatedView>
</div>

@code {
	[Parameter]
	public string UnitId { get; set; }
	private UnitResponse CurrentUnit = new UnitResponse();
	private List<UnitMemberResponse> UnitMembers = new List<UnitMemberResponse>();
	private List<UnitResponse> UnitChildren = new List<UnitResponse>();
	private List<SupportRelationshipResponse> SupportRelationships = new List<SupportRelationshipResponse>();
	private List<BuildingRelationship> BuildingRelationships = new List<BuildingRelationship>();
	private List<ToolResponse> UnitTools = new List<ToolResponse>();
	private List<SupportType> SupportTypes = new List<SupportType>();
	private bool ShowLoader = false;
	private IDisposable Loading() => new DisposableLoader(s => ShowLoader = s, StateHasChanged);
	private bool CreateMode => Navigation.Uri.Substring(Navigation.BaseUri.Length - 1).ToLower().StartsWith($"/units/create");
	private bool EditMode => Navigation.Uri.Substring(Navigation.BaseUri.Length - 1).ToLower().StartsWith($"/units/{CurrentUnit.Id}/edit");
	private EditContext UnitEditContext;
	private EditContext BuildingRelationshipAddContext;
	private EditContext SupportRelationshipAddContext;
	private EditContext ChildUnitAddContext;
	private UnitRequest UnitToUpdate = new UnitRequest();
	private Building BuildingRelationshipToAdd = new Building();
	private SupportRelationshipResponse SupportRelationshipToAdd = new SupportRelationshipResponse();
	private UnitResponse ChildUnitToAdd = new UnitResponse();
	private bool UnitFormInvalid = false;
	private bool CanEditUnitDetails = false;
	private bool CanDeleteUnit = false;
	private bool CanEditMemberTools = false;
	private bool CanEditUnitMembers = false;
	private bool CanEditSupportRelationships = false;
	private bool CanEditBuildingRelationships = false;
	private bool CanEditUnitChildren = false;
	private List<(Role Role, string Description)> RoleDescriptions = new List<(Role, string)> {
		(Role.Leader, "Unit Leaders are VPs, directors, managers."),
		(Role.Sublead, "Unit Subleads are team leads and co-admins."),
		(Role.Member, "Unit Members are individual contributers."),
		(Role.Related, "Related people are executive assistants and self-supported faculty/staff that do not solely report to this unit.")
	};

	protected override async Task OnInitializedAsync()
	{
		await SetLoggedInUser();
		using (Loading())
		{
			UnitEditContext = new EditContext(UnitToUpdate);
			BuildingRelationshipAddContext = new EditContext(BuildingRelationshipToAdd);
			SupportRelationshipAddContext = new EditContext(SupportRelationshipToAdd);
			ChildUnitAddContext = new EditContext(ChildUnitToAdd);
			UnitEditContext.OnFieldChanged += HandleUnitFormFieldChanged;
			SupportRelationshipAddContext.OnFieldChanged += HandleSupportRelationshipFormFieldChanged;
			Navigation.LocationChanged += HandleLocationChanged;
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		await FetchAllDetails();
	}

	private async Task FetchAllDetails()
	{
		if (LoggedInUser != null && CreateMode == false)
		{
			using (Loading())
			{
				await Task.WhenAll(new[] {
					GetUnit(),
					GetUnitMembers(),
					GetUnitChildren(),
					GetSupportRelationships(),
					GetBuildingRelationships(),
					GetUnitTools(),
					GetSupportTypes()
				});
				if (CurrentUnit != null)
				{
					UnitToUpdate.Name = CurrentUnit.Name;
					UnitToUpdate.Description = CurrentUnit.Description;
					UnitToUpdate.Url = CurrentUnit.Url;
					UnitToUpdate.Email = CurrentUnit.Email;
					UnitToUpdate.ParentId = CurrentUnit.ParentId;
				}
			}
		}
	}

	public void Dispose()
	{
		Navigation.LocationChanged -= HandleLocationChanged;
		UnitEditContext.OnFieldChanged -= HandleUnitFormFieldChanged;
		SupportRelationshipAddContext.OnFieldChanged -= HandleSupportRelationshipFormFieldChanged;
	}

	private async void AddBuildingRelationship(Building request)
	{
		GeneralException = null;
		await Post<BuildingRelationshipResponse>("buildingRelationships", new BuildingRelationshipRequest
		{
			UnitId = CurrentUnit.Id,
			BuildingId = request.Id
		});
		await GetBuildingRelationships();
		StateHasChanged();
	}
	private async void AddChildUnit(UnitResponse request)
	{
		GeneralException = null;
		request.ParentId = CurrentUnit.Id;
		await Put<UnitResponse>($"units/{request.Id}", request);
		await GetUnitChildren();
		StateHasChanged();
	}
	private async void AddSupportRelationship()
	{
		GeneralException = null;
		await Post<SupportRelationshipResponse>("supportRelationships", new SupportRelationshipResponse
		{
			UnitId = CurrentUnit.Id,
			DepartmentId = SupportRelationshipToAdd.DepartmentId,
			SupportTypeId = SupportRelationshipToAdd?.SupportTypeId,
		});
		SupportRelationshipToAdd.DepartmentId = 0;
		SupportRelationshipToAdd.Department = null;
		SupportRelationshipToAdd.SupportType = null;
		SupportRelationshipToAdd.SupportTypeId = null;
		await GetSupportRelationships();
		StateHasChanged();
	}

	public void SelectSupportDepartment(SupportRelationshipResponse request)
	{
		SupportRelationshipToAdd.DepartmentId = request.DepartmentId;
		SupportRelationshipToAdd.Department = request.Department;
		StateHasChanged();
	}

	public void ClearAddingSupportDepartment() {
		SupportRelationshipToAdd.DepartmentId = 0;
		SupportRelationshipToAdd.Department = null;
	}

	public string BuildingRelationshipDisplayLamba(Building building)
	{
		return $"{building.Name} ({building.Code}) {string.Join(", ", building.Address, building.City)}";
	}
	public async Task CreateUnit()
	{
		using (Loading())
		{
			GeneralException = null;
			var response = await Post<UnitResponse>("/units",UnitToUpdate);
			CurrentUnit = response.Value;
			if(CurrentUnit != null & CurrentUnit.Id != 0)
			{
				Navigation.NavigateTo($"/Units/{CurrentUnit.Id}");
			}
		}
	}

	private async Task DeleteUnit()
	{
		var confirmMessage = $"Are you sure you want to delete {CurrentUnit.Name}? This can't be undone.";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			var deleteResponse = await Api().DeleteAsync($"/units/{UnitId}");
			if (deleteResponse.IsSuccessStatusCode)
			{
				Navigation.NavigateTo("/units");
			} else
			{
				GeneralException = new Exception(await GetErrorMessage(deleteResponse));
			}
		}
	}

	private async Task GetBuildingRelationships()
	{
		var response = await Get<List<BuildingRelationship>>($"/Units/{UnitId}/supportedBuildings");
		BuildingRelationships = response.Value;
		CanEditBuildingRelationships = response.Permissions.HasFlag(EntityPermissions.Post); //This is effectively binary and the other permissions (Put,Delete) mean the same as Post.
	}

	private async Task<List<Building>> GetBuildingRelationshipSuggestions(string searchTerm)
	{
		var response = await Get<List<Building>>($"/buildings?q={searchTerm}&_limit=15");
		return response.Value;
	}
	private async Task<List<UnitResponse>> GetChildUnitSuggestions(string searchTerm)
	{
		var response = await Get<List<UnitResponse>>($"/units?q={searchTerm}&_limit=15");
		return response.Value;
	}

	private async Task<List<SupportRelationshipResponse>> GetSupportRelationshipSuggestions(string searchTerm)
	{
		var response = await Get<List<Department>>($"/departments?q={searchTerm}&_limit=15");
		return response.Value.Select(department => new SupportRelationshipResponse
		{
			UnitId = CurrentUnit.Id,
			Department = department,
			DepartmentId = department.Id,
			SupportTypeId = SupportRelationshipToAdd.SupportTypeId,
			SupportType = SupportRelationshipToAdd.SupportType
		}).ToList();
	}

	private async Task GetSupportRelationships()
	{
		var response = await Get<List<SupportRelationshipResponse>>($"/Units/{UnitId}/supportedDepartments");
		SupportRelationships = response.Value;
		CanEditSupportRelationships = response.Permissions.HasFlag(EntityPermissions.Post); //This is effectively binary and the other permissions (Put,Delete) mean the same as Post.
	}
	private async Task GetSupportTypes()
	{
		var response = await Get<List<SupportType>>($"/SupportTypes");
		SupportTypes = response.Value;
	}

	private async Task GetUnit()
	{
		var response = await Get<UnitResponse>($"/Units/{UnitId}");
		CurrentUnit = response.Value;
		CanEditUnitDetails = response.Permissions.HasFlag(EntityPermissions.Put); //This is effectively binary and the other permissions (Put,Delete) mean the same as Post.
		CanDeleteUnit = response.Permissions.HasFlag(EntityPermissions.Delete); //This is effectively binary and the other permissions (Put,Delete) mean the same as Post.
	}

	private async Task GetUnitChildren()
	{
		var response = await Get<List<UnitResponse>>($"/Units/{UnitId}/children");
		UnitChildren = response.Value;
		CanEditUnitChildren = response.Permissions.HasFlag(EntityPermissions.Post); //This is effectively binary and the other permissions (Put,Delete) mean the same as Post.
	}

	private async Task GetUnitMembers()
	{
		var response = await Get<List<UnitMemberResponse>>($"/Units/{UnitId}/members");
		UnitMembers = response.Value;
		//This is effectively binary and the other permissions (Put,Delete) mean the same as Post.
		CanEditUnitMembers = response.Permissions.HasFlag(EntityPermissions.Post);
	}

	private async Task GetUnitTools()
	{
		var response = await Get<List<ToolResponse>>($"/Units/{UnitId}/tools");
		UnitTools = response.Value;
		CanEditMemberTools = response.Permissions.HasFlag(PermsGroups.All);
	}

	private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
	{
		StateHasChanged();
	}
	private void HandleSupportRelationshipFormFieldChanged(object sender, FieldChangedEventArgs e)
	{
		SupportRelationshipToAdd.SupportTypeId = SupportRelationshipToAdd.SupportType?.Id;
		StateHasChanged();
	}
	private void HandleUnitFormFieldChanged(object sender, FieldChangedEventArgs e)
	{
		UnitFormInvalid = !UnitEditContext.Validate();
		StateHasChanged();
	}

	private async Task RemoveBuildingRelationship(BuildingRelationship relationship)
	{
		var confirmMessage = $"Are you sure you want to remove {relationship.Building.Name} as a supported building?";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			var deleteResponse = await Delete<UnitResponse>($"/buildingRelationships/{relationship.Id}");
			await GetBuildingRelationships();
		}
		StateHasChanged();
	}

	private async Task RemoveChildUnit(UnitResponse child)
	{
		var confirmMessage = $"Are you sure you want to remove {child.Name} as a child of this unit?";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			child.ParentId = null;

			var deleteResponse = await Put<UnitResponse>($"/Units/{child.Id}", child);
			await GetUnitChildren();
		}
		StateHasChanged();
	}

	private async Task RemoveMember(UnitMemberResponse member)
	{
		var confirmMessage = $"Are you sure you want to remove {member.Person.Name} from this unit?";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			var deleteResponse = await Delete<UnitResponse>($"/memberships/{member.Id}");
			await GetUnitMembers();
		}
		StateHasChanged();
	}

	private async Task RemoveSupportRelationship(SupportRelationshipResponse relationship)
	{
		var confirmMessage = $"Are you sure you want to remove {relationship.Department.Name} as a supported department?";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			var deleteResponse = await Delete<UnitResponse>($"/supportRelationships/{relationship.Id}");
			await GetSupportRelationships();
		}
		StateHasChanged();
	}

	private async Task ToggleArchiveStatus()
	{
		var confirmMessage = $"Are you sure you want to {(CurrentUnit.Active ? "archive" : "unarchive")} {CurrentUnit.Name}? ";
		confirmMessage += (CurrentUnit.Active)
			? "All members will lose their assigned tools, and the unit will be listed as Archived."
			: "All members' assigned tools and relationships will be reactivated.";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			var deleteResponse = await Delete<UnitResponse>($"/units/{UnitId}/archive");
			await GetUnit();
		}
	}

	public async Task UpdateUnit()
	{
		using (Loading())
		{
			GeneralException = null;
			var response = await MakeRequest<UnitResponse>(Api().PutAsJsonAsync($"/Units/{UnitId}", UnitToUpdate));
			CurrentUnit = response.Value;
		}
	}

	private string GetPageTitle() => $"{(CurrentUnit?.Name == null ? "Add Unit" : $"{CurrentUnit?.Name}")} - IT People - Indiana University";
}
