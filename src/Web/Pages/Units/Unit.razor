@using Models
@using Models.Enums
@using RivetBlazor.Components
@using web.Shared
@using System.Linq
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable
@inherits PageBase
@page "/Units/{unitId}"
@page "/Units/{unitId}/edit"

<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<nav role="navigation" aria-label="Breadcrumbs">
		<ol class="rvt-breadcrumbs rvt-m-bottom-lg">
			<li><a href="/"> Home </a></li>
			<li><a href="/Units"> Units </a></li>
			<li aria-current="page">@(CurrentUnit?.Name ?? UnitId)</li>
		</ol>
	</nav>
	<AuthenticatedView>
		<NotAuthenticated>
			<h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">Unit @UnitId</h1>
			<p>
				You must login to view this resource.
			</p>
			<p>
				<a class="rvt-button" href="/SignIn?Destination=/Units/@UnitId">Log In</a>
			</p>
		</NotAuthenticated>
		<Authenticated>
			<Loader Loading="ShowLoader">
				<section class="rvt-p-bottom-xxl">
					@if (EditMode == false)
					{
						<div style="display: flex; justify-content: space-between; float: right;">
							@if (CanEditUnitDetails)
							{
								<a class="rvt-button rvt-button--danger rvt-m-right-xs" title="Delete Unit" @onclick="DeleteUnit">
									<rvt-icon name="trash"></rvt-icon>
									<span class="rvt-sr-only">Delete Unit</span>
								</a>
								@if (CurrentUnit.Active)
								{
									<a class="rvt-button rvt-m-right-xs" title="Archive Unit" @onclick="ToggleArchiveStatus">
										<rvt-icon name="lock-closed"></rvt-icon>
									</a>
								}
								else
								{
									<a class="rvt-button rvt-m-right-xs" title="Unarchive Unit" @onclick="ToggleArchiveStatus">
										<rvt-icon name="lock-open"></rvt-icon>
									</a>
								}
							}
							@if (CanEditUnitDetails || CanEditUnitMembers || CanEditMemberTools)
							{
								<a class="rvt-button" href="/Units/@UnitId/Edit">
									<rvt-icon name="pencil"></rvt-icon>
								</a>
							}
						</div>
					}
					@if (EditMode && CanEditUnitDetails)
					{
						<div class="rvt-border-bottom rvt-p-bottom-sm">
							<h1>Edit</h1>
							<EditForm EditContext="@UnitEditContext">
								<RivetInputText @bind-Value="UnitToUpdate.Name" Label="Name" />
								<RivetInputTextArea @bind-Value="UnitToUpdate.Description" Label="Description" />
								<RivetInputText @bind-Value="UnitToUpdate.Url" Label="URL" />
								<RivetInputText @bind-Value="UnitToUpdate.Email" Label="Contact Email" />
								<button type="submit" class="rvt-button rvt-m-top-md" disabled="@(UnitFormInvalid || ShowLoader)" @onclick="UpdateUnit">
									Update
								</button>
								<a class="rvt-button rvt-button--danger" href="/Units/@CurrentUnit.Id">Cancel</a>
							</EditForm>
						</div>
					}
					@if (EditMode == false || CanEditUnitDetails == false)
					{
						<h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">
							@CurrentUnit.Name
							@if (CurrentUnit.Active == false)
							{
								<span class="rvt-inline-alert rvt-inline-alert--standalone rvt-inline-alert--info rvt-m-left-xs rvt-ts-xs">Archived</span>
							}
						</h1>
						@if (string.IsNullOrWhiteSpace(CurrentUnit.Description) == false)
						{
							<div class="rvt-m-top-sm">@CurrentUnit.Description</div>
						}
						<div class="rvt-grid">
							@if (string.IsNullOrWhiteSpace(CurrentUnit.Url) == false)
							{
								<a href="@CurrentUnit.Url" class="rvt-button rvt-button--secondary rvt-m-left-xs rvt-m-top-md">Visit Website</a>
							}
							@if (string.IsNullOrWhiteSpace(CurrentUnit.Email) == false)
							{
								<a href="mailto:@CurrentUnit.Email" class="rvt-button rvt-button--secondary rvt-m-left-xs rvt-m-top-md">Contact</a>
							}
						</div>
					}
					<DisplayException Ex=@GeneralException />
				</section>
				<div class="rvt-grid">
					<div class="rvt-grid__item-6-lg-up">
						<div class="rvt-grid">
							<div class="rvt-grid__item">
								@if(CanEditUnitMembers)
								{
									<section class="rvt-m-bottom-lg">
										<a href=@($"/Units/{UnitId}/AddMember") class="rvt-button rvt-button--plain" title="Add Person">
											<rvt-icon name="user-add"></rvt-icon>
											<span>&nbsp; Add member</span>
										</a>
									</section>
								}
								@foreach (var roleDescription in RoleDescriptions)
								{
									var role = roleDescription.Role;
									@if (EditMode == true || UnitMembers.Count(m => m.Role == role) > 0)
									{
										<section class="rvt-m-bottom-lg">
											<h3 class="rvt-ts-20 rvt-ts-26-lg-up rvt-text-bold">@role.ToString() (@UnitMembers.Count(m => m.Role == role))</h3>
											@if (EditMode)
											{
												<p>@roleDescription.Description</p>
											}
											@foreach (var member in UnitMembers.Where(m => m.Role == role))
											{
												<div class="rvt-p-all-sm">
													<div class="rvt-border-bottom rvt-p-bottom-sm">
														<div class="rvt-grid ">
															<div class="rvt-grid__item" style="align-self: center;">
																<a href="/people/@member.PersonId" class="rvt-m-bottom-remove rvt-text-bold rvt-m-bottom-sm rvt-ts-18">
																	<span>@member.Person.Name</span>
																</a>
																<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">
																	@member.Title
																	@if (member.Percentage != 100)
																	{
																		<span style="padding-left:0.25rem">@member.Percentage% </span>
																	}
																</p>
															</div>
																
															<div class="rvt-text-right">
																@if (CanEditMemberTools)
																{
																	<a href=@($"/Units/{UnitId}/EditMember/{member.Person.Netid}") class="rvt-button rvt-button--plain" title="Edit tool permissions for @member.Person.Name">
																		<rvt-icon name="pencil"></rvt-icon>
																		<span class="rvt-sr-only">Edit tool permissions for @member.Person.Name</span>
																	</a>
																}
																@if (CanEditUnitMembers)
																{
																	<button class="rvt-button rvt-button--plain" title="Remove @member.Person.Name" @onclick="@(async () => await RemoveMember(member))">
																		<rvt-icon name="trash"></rvt-icon>
																		<span class="rvt-sr-only">Remove @member.Person.Name</span>
																	</button>
																}
															</div>
														</div>
													</div>
												</div>
											}
										</section>
									}
								}
							</div>
						</div>
					</div>
					<div class="rvt-grid__item--last rvt-grid__item-5-lg-up">
						@if (CurrentUnit.Parent != null || UnitChildren.Count > 0)
						{
							<Collapse>
								<Title>Parent and Children</Title>
								<Content>
									@if (CurrentUnit.Parent != null)
									{
										<div class="rvt-m-bottom-xl">
											<div class="rvt-grid">
												<div class="rvt-grid__item-2-sm-up">
													<svg width="100%" height="35" viewBox="0 0 41 35" fill="none" xmlns="http://www.w3.org/2000/svg">
														<g clip-path="url(#clip0)">
															<rect width="41" height="35"></rect>
															<rect x="15.3528" y="0.5" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
															<rect x="15.3528" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
															<rect x="30.2056" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
															<rect x="0.5" y="24.21" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
															<line x1="20.0001" y1="23.71" x2="20.0001" y2="11.2905" stroke="black"></line>
															<path d="M35.585 24.1118V16.334H5.4151V24.1118" stroke="black"></path>
														</g>
														<defs>
															<clipPath id="clip0">
																<rect width="41" height="35" fill="white"></rect>
															</clipPath>
														</defs>
													</svg>
												</div>
												<div class="rvt-grid__item">
													<a href="/units/@CurrentUnit.Parent.Id" class="rvt-m-bottom-remove rvt-text-bold">@CurrentUnit.Parent.Name</a>
													@if (CurrentUnit.Parent.Active == false)
													{
														<span class="rvt-inline-alert--standalone rvt-inline-alert--info rvt-m-left-xs rvt-ts-xs">Archived</span>
													}
													@if (string.IsNullOrWhiteSpace(CurrentUnit.Parent.Description))
													{
														<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">@CurrentUnit.Parent.Description</p>
													}
												</div>
											</div>
										</div>
									}
									@foreach (var child in UnitChildren)
									{
										<div class="rvt-grid">
											<div class="rvt-grid__item-2-sm-up">
												<svg width="100%" height="35" viewBox="0 0 41 35" fill="none" xmlns="http://www.w3.org/2000/svg">
													<g clip-path="url(#clip0)">
														<rect width="41" height="35"></rect>
														<rect x="15.3528" y="0.5" width="10.2944" height="10.2904" fill="#C4C4C4" stroke="black"></rect>
														<rect x="15.3528" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
														<rect x="30.2056" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
														<rect x="0.5" y="24.21" width="10.2944" height="10.2904" fill="#DF3603" stroke="black"></rect>
														<line x1="20.0001" y1="23.71" x2="20.0001" y2="11.2905" stroke="black"></line>
														<path d="M35.585 24.1118V16.334H5.4151V24.1118" stroke="black"></path>
													</g>
													<defs>
														<clipPath id="clip0"><rect width="41" height="35" fill="white"></rect></clipPath>
													</defs>
												</svg>
											</div>
											<div class="rvt-grid__item">
												<div class="rvt-m-bottom-md">
													<a href="/units/@child.Id" class="rvt-m-bottom-remove rvt-text-bold">@child.Name</a>
													@if (child.Active == false)
													{
														<span class="rvt-inline-alert--standalone rvt-inline-alert--info rvt-m-left-xs rvt-ts-xs">Archived</span>
													}
													@if (string.IsNullOrWhiteSpace(child.Description))
													{
														<p class="rvt-ts-14 rvt-m-top-remove rvt-m-bottom-remove">@child.Description</p>
													}
												</div>
											</div>
										</div>
									}
								</Content>
							</Collapse>
						}
						@if (SupportRelationships.Count > 0)
						{
							<Collapse>
								<Title>Supported Departments</Title>
								<Content>
									<ul class="rvt-list rvt-plain-list">
										@foreach (var supportRelationship in SupportRelationships)
										{
											<li>
												<a href="/departments/@supportRelationship.DepartmentId">@supportRelationship.Department.Name</a>
												@if (supportRelationship.SupportType != null)
												{
													<div style="font-size:smaller;">@supportRelationship.SupportType.Name</div>
												}
												@if (supportRelationship.Department.Description != null)
												{
													<div style="font-size:smaller;">@supportRelationship.Department.Description</div>
												}
											</li>
										}
									</ul>
								</Content>
							</Collapse>
						}
						@if (BuildingRelationships.Count > 0)
						{
							<Collapse>
								<Title>Supported Buildings</Title>
								<Content>
									<ul class="rvt-list rvt-plain-list">
										@foreach (var buildingRelationship in BuildingRelationships)
										{
											<li>
												<a href="/departments/@buildingRelationship.BuildingId">@buildingRelationship.Building.Name (@buildingRelationship.Building.Code)</a>
												@if (string.IsNullOrWhiteSpace(buildingRelationship.Building.Address) == false || string.IsNullOrWhiteSpace(buildingRelationship.Building.City) == false)
												{
													<br />
													<span style="font-size:smaller;">@string.Join(", ", buildingRelationship.Building.Address, buildingRelationship.Building.City)</span>
												}
											</li>
										}
									</ul>
								</Content>
							</Collapse>
						}
					</div>
				</div>
			</Loader>
		</Authenticated>
	</AuthenticatedView>
</div>

@code {
	[Parameter]
	public string UnitId { get; set; }
	private UnitResponse CurrentUnit = new UnitResponse();
	private List<UnitMemberResponse> UnitMembers = new List<UnitMemberResponse>();
	private List<UnitResponse> UnitChildren = new List<UnitResponse>();
	private List<SupportRelationshipResponse> SupportRelationships = new List<SupportRelationshipResponse>();
	private List<BuildingRelationship> BuildingRelationships = new List<BuildingRelationship>();
	private List<ToolResponse> UnitTools = new List<ToolResponse>();
	private bool ShowLoader = false;
	private IDisposable Loading() => new DisposableLoader(s => ShowLoader = s, StateHasChanged);
	private bool EditMode = false;
	private EditContext UnitEditContext;
	private UnitRequest UnitToUpdate;
	private bool UnitFormInvalid = false;
	private bool CanEditUnitDetails = false;
	private bool CanEditMemberTools = false;
	private bool CanEditUnitMembers = false;
	private List<(Role Role, string Description)> RoleDescriptions = new List<(Role, string)> {
		(Role.Leader, "Unit Leaders are VPs, directors, managers."),
		(Role.Sublead, "Unit Subleads are team leads and co-admins."),
		(Role.Member, "Unit Members are individual contributers."),
		(Role.Related, "Related people are executive assistants and self-supported faculty/staff that do not solely report to this unit.")
	};
	
	protected override async Task OnInitializedAsync()
	{
		await SetLoggedInUser();
		if (LoggedInUser != null)
		{
			using (Loading())
			{
				await Task.WhenAll(new[] {
							GetUnit(),
							GetUnitMembers(),
							GetUnitChildren(),
							GetSupportRelationships(),
							GetBuildingRelationships(),
							GetUnitTools()
						});
				SetEditMode();
				UnitToUpdate = new UnitRequest
				{
					Name = CurrentUnit.Name,
					Description = CurrentUnit.Description,
					Url = CurrentUnit.Url,
					Email = CurrentUnit.Email
				};
				UnitEditContext = new EditContext(UnitToUpdate);
				UnitEditContext.OnFieldChanged += HandleUnitFormFieldChanged;
			}
		}
		Navigation.LocationChanged += HandleLocationChanged;
	}

	public void Dispose()
	{
		Navigation.LocationChanged -= HandleLocationChanged;
		UnitEditContext.OnFieldChanged -= HandleUnitFormFieldChanged;
	}

	private async Task DeleteUnit()
	{
		var confirmMessage = $"Are you sure you want to delete {CurrentUnit.Name}? This can't be undone.";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			var deleteResponse = await Delete<UnitResponse>($"/units/{UnitId}");
			CurrentUnit = deleteResponse.Value;
		}
		Navigation.NavigateTo("/units");
	}

	private async Task GetBuildingRelationships()
	{
		var response = await Get<List<BuildingRelationship>>($"/Units/{UnitId}/supportedBuildings");
		BuildingRelationships = response.Value;
	}

	private async Task GetSupportRelationships()
	{
		var response = await Get<List<SupportRelationshipResponse>>($"/Units/{UnitId}/supportedDepartments");
		SupportRelationships = response.Value;
	}

	private async Task GetUnit()
	{
		var response = await Get<UnitResponse>($"/Units/{UnitId}");
		CurrentUnit = response.Value;
		//This is effectively binary and the other permissions (Put,Delete) mean the same as Post.
		CanEditUnitDetails = response.Permissions.HasFlag(EntityPermissions.Post);
	}

	private async Task GetUnitChildren()
	{
		var response = await Get<List<UnitResponse>>($"/Units/{UnitId}/children");
		UnitChildren = response.Value;
	}

	private async Task GetUnitMembers()
	{
		var response = await Get<List<UnitMemberResponse>>($"/Units/{UnitId}/members");
		UnitMembers = response.Value;
		//This is effectively binary and the other permissions (Put,Delete) mean the same as Post.
		CanEditUnitMembers = response.Permissions.HasFlag(EntityPermissions.Post);
	}

	private async Task GetUnitTools()
	{
		var response = await Get<List<ToolResponse>>($"/Units/{UnitId}/tools");
		UnitTools = response.Value;
		CanEditMemberTools = response.Permissions.HasFlag(PermsGroups.All);
	}

	private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
	{
		SetEditMode();
		StateHasChanged();
	}

	private void HandleUnitFormFieldChanged(object sender, FieldChangedEventArgs e)
	{
		UnitFormInvalid = !UnitEditContext.Validate();
		StateHasChanged();
	}

	private async Task RemoveMember(UnitMemberResponse member)
	{
		var confirmMessage = $"Are you sure you want to remove {member.Person.Name} from this unit?";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			var deleteResponse = await Delete<UnitResponse>($"/memberships/{member.Id}");
			await GetUnitMembers();
		}
		StateHasChanged();
	}

	private void SetEditMode()
	{
		var path = Navigation.Uri.Substring(Navigation.BaseUri.Length - 1);
		EditMode = path.ToLower().StartsWith($"/units/{CurrentUnit.Id}/edit");
	}

	private async Task ToggleArchiveStatus()
	{
		var confirmMessage = $"Are you sure you want to {(CurrentUnit.Active ? "archive" : "unarchive")} {CurrentUnit.Name}? ";
		confirmMessage += (CurrentUnit.Active)
			? "All members will lose their assigned tools, and the unit will be listed as Archived."
			: "All members' assigned tools and relationships will be reactivated.";
		if (await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage))
		{
			var deleteResponse = await Delete<UnitResponse>($"/units/{UnitId}/archive");
			CurrentUnit = deleteResponse.Value;
		}
	}

	public async Task UpdateUnit()
	{
		using (Loading())
		{
			GeneralException = null;
			var response = await MakeRequest<UnitResponse>(Api().PutAsJsonAsync($"/Units/{UnitId}", UnitToUpdate));
			CurrentUnit = response.Value;
		}
	}
}
