@using Models
@using web.Shared
@implements IDisposable
@inherits Shared.PageBase
@inject NavigationManager Navigation
@page "/Units/{unitId}/AddMember"

<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<nav role="navigation" aria-label="Breadcrumbs">
		<ol class="rvt-breadcrumbs rvt-m-bottom-lg">
			<li><a href="/">Home</a></li>
			<li><a href="/Units">Units</a></li>
			<li><a href="/Units/@UnitId">@(CurrentUnit?.Name ?? UnitId)</a></li>
			<li aria-current="page">Add Member</li>
		</ol>
	</nav>
	
	<div class="rvt-flex-md-up rvt-justify-space-between-lg-up">
		<!-- our title -->
		<div class="rvt-m-right-sm-md-up">
			<h1>Add Member to @(CurrentUnit?.Name ?? $"Unit {UnitId}")</h1>
		</div>
	</div>

	<DisplayException Ex=@GeneralException />

	<EditForm EditContext="@FormContext">
		<SuggestionButtons T=PeopleLookupItem Label="Search" Placeholder="Enter a search term" Description="Search by username or first and last name." ButtonClickedAction=AddPerson AsyncSuggestionGetter=GetSuggestions DisplayLambda=@(s => $"{s.Name} ({s.NetId})") />
	</EditForm>
</div>

@code
{
	[Parameter]
	public string UnitId { get; set; }

	private UnitResponse CurrentUnit;
	
	private object ObjForContext = new object();
	private EditContext FormContext;

	protected override async Task OnInitializedAsync()
	{
		// Setup our editcontext
		FormContext = new EditContext(ObjForContext);

		await SetLoggedInUser();
	}

	protected override async Task OnParametersSetAsync()
	{
		await SetCurrentUnit();
	}

	private async Task SetCurrentUnit()
	{
		var response = await Get<UnitResponse>($"units/{UnitId}");
		CurrentUnit = response.Value;
	}

	private void AddPerson(PeopleLookupItem pli)
	{
		Navigation.NavigateTo($"/Units/{UnitId}/EditMember/{pli.NetId}");
	}

	private async Task<List<PeopleLookupItem>> GetSuggestions(string searchTerm)
	{
		var response = await Get<List<PeopleLookupItem>>($"people-lookup?q={searchTerm}");
		return response.Value;
	}

	public void Dispose() {}
}