@using System.Linq
@using Models
@using web.Shared
@using RivetBlazor.Components
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@implements IDisposable
@inherits PageBase
@page "/buildings/{BuildingId}"

<Title Value="@GetPageTitle()" />
<HeaderNavBar Page="Buildings" CurrentPage=@_Building.Name />
<div class="rvt-bg-white rvt-m-tb-xl rvt-p-tb-xl">
    <div class="rvt-container" style="max-width: 1440px; margin: auto;">
        <AuthenticatedView>
		<NotAuthenticated>
			<h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">@_Building.Name</h1>
			<p>
				You must login to view this resource.
			</p>
			<p>
				<a class="rvt-button" href="/SignIn?Destination=/buildings/@BuildingId">Log In</a>
			</p>
		</NotAuthenticated>
		<Authenticated>
			<Loader Loading="ShowLoader">
                <div class="rvt-grid">
                    <div class="rvt-grid__item">
                        <div class="rvt-m-bottom-xxl">
                            <h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">@_Building.Name</h1>
                            <p>@_Building.Address</p>
                        </div>
                    </div>
                </div>
                @if (SupportingUnits.Count() != 0)
                {
                    <div class="rvt-grid">
                        <div class="rvt-grid__item-6-md-up rvt-p-lr-md">
                            <div class="rvt-m-bottom-xl">
                                <div class="rvt-grid">
                                    <div class="rvt-grid__item rvt-border-all rvt-border-radius rvt-bg-white" style="overflow: auto;">
                                        <div class="rvt-grid">
                                            <div class="rvt-grid__item rvt-bg-cream rvt-border-bottom rvt-p-all-xs rvt-p-left-md rvt-p-right-md rvt-ts-18 rvt-text-bold"
                                            style="color: rgb(51, 51, 51);">Supporting Units</div>
                                        </div>
                                        @foreach (var unit in SupportingUnits)
                                        {
                                            <div class="rvt-grid">
                                                <div class="rvt-grid__item rvt-p-all-md">
                                                    <ul class="rvt-list rvt-plain-list">
                                                        <li><a href="/units/@unit.Id">@unit.Name</a></li>
                                                        @if (unit.Description != null)
                                                        {
                                                            <div><span>@unit.Description</span></div>
                                                        }
                                                    </ul>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </Loader>
		</Authenticated>
	</AuthenticatedView>
    </div>
</div>


@code{
    [Parameter]
    public string BuildingId { get; set; }
    private EditContext BuildingEditContext;
    private Exception GeneralException;
    private Building _Building = new Building();
	private IEnumerable<UnitResponse> SupportingUnits = new List<UnitResponse>();
    private bool ShowLoader = false;
	private IDisposable Loading() => new DisposableLoader(s => ShowLoader = s, StateHasChanged);

    protected override async Task OnInitializedAsync()
    {
        BuildingEditContext = new EditContext(BuildingId);
		await SetLoggedInUser();
		if(LoggedInUser != null)
		{
            using (Loading())
            {
                await Task.WhenAll(new[] { GetBuildingInformation(), GetSupportingUnits() });
                @* await GetSupportingUnits(); *@
            }
		}
    }
    private async Task GetBuildingInformation()
    {
        var response = await Get<Building>($"/buildings/{BuildingId}");
        _Building = response.Value;
    }
    private async Task GetSupportingUnits()
    {
        var response = await Get<List<BuildingRelationshipResponse>>($"/buildings/{BuildingId}/supportingUnits");
        //_Building = response.Value.Where(br => br.BuildingId.ToString() == BuildingId).Select(br => br.Building).First();
        SupportingUnits = response.Value.Select(br => br.Unit);
    }

    private string GetPageTitle() => $"{_Building.Name} - IT People - Indiana University";
    public void Dispose() { }
}