@using Models
@using Models.Enums
@using RivetBlazor.Components
@using web.Shared
@using System.Net
@using System.Web
@using System.Linq
@using Newtonsoft.Json
@using Microsoft.AspNetCore.WebUtilities
@using System.Collections
@inject IHttpClientFactory ClientFactory
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime;
@implements IDisposable
@page "/People"

<HeaderNavBar Page="People" />

<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<AuthenticatedView>
		<NotAuthenticated>			
			<p>
				You must login to view this resource.
			</p>
			<p>
				<a class="rvt-button" href="/SignIn?Destination=/People">Login</a>
				
			</p>
		</NotAuthenticated>
		<Authenticated>
			<div class="rvt-grid">
				<div class="rvt-grid__item">
					<h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">IT People</h1>
						<p>Use the filters below to find IT People based on their role within a unit, their job classification, and/or campus.</p>
				</div>
			</div>

			<DisplayException Ex=@GeneralException />

            <div class="rvt-grid rvt-m-top-md">
				<div class="rvt-grid__item-5-md-up">
					<EditForm  EditContext="@editContext">
                		<DataAnnotationsValidator />
							<div class="rvt-p-bottom-md">
								<RivetInputFlag @bind-Value="roleValue" Legend="Unit Role" Description="" Inline=@inline />   
								<RivetInputFlag @bind-Value="campus" Legend="Campus" Description="" Inline=@inline />
								<RivetInputFlag @bind-Value="areaValue" Legend="Area" Description="" Inline=@inline />
								<RivetInputFlag @bind-Value="responsibility" Legend="Responsibility" Description=""  Inline=@inline />
							</div>
					</EditForm> 
				</div>
				@if (LoggedInUser != null)		
				{
					<div class="rvt-grid__item-7-md-up">
						@if (IsMatchFound)
						{
							<div class="rvt-grid rvt-p-bottom-lg">								
								<button type="button" class="rvt-button" @onclick="ExportResultsToCSV" role="menuitemradio">
									<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
										<use xlink:href="/_content/RivetBlazor/css/icons/rvt-icons.svg#rvt-icon-download"></use>
									</svg>
									<span class="rvt-m-left-xs">Export results to CSV</span>
								</button>
							</div>

							@foreach(var person in peopleList)
							{
								<div class="rvt-grid rvt-p-bottom-md">
									<div><a href="/people/@person.Id" class="rvt-link-bold">@person.Name</a> (<a href="mailto:@person.CampusEmail">@person.Netid</a>) <br>@person.Position<br></div>
								</div>
							}
						
						}
						else
						{
							<div class="rvt-panel"><p>No people found matching those filters. You can make yourself easier to find by <a href="/people/@LoggedInUser.Username">keeping your profile up to date.</a></p></div>
						}		
						
					</div>						
				}
						
			</div>
				<p>
					<button id="apply-filter" class="rvt-button" type="submit" @onclick=@GetFilteredPeople>Apply Filters</button>
				</p>

		</Authenticated>
	</AuthenticatedView>
</div>

@code {
	private Role roleValue;
	private Area areaValue;
    private Campus campus;
	private Responsibilities responsibility;
	private EntityPermissions CrudPerms;
	private EditContext editContext;
	private Exception GeneralException;
	private AuthenticatedUser LoggedInUser;
    private Person Person = new Person();
	private IEnumerable<Person> peopleList = new List<Person>();
	private bool IsMatchFound;
	private bool inline = false; 
	private HttpClient Api() => ClientFactory.CreateClient("Api");
	List<string> finalCheckedValues = new List<string>();
	private Dictionary<string, string> queryParams = new Dictionary<string, string>();	

	private string RequestUri;

    protected override async Task OnInitializedAsync()
	{
		editContext = new EditContext(areaValue);
		editContext = new EditContext(campus);
		editContext = new EditContext(responsibility);
		editContext = new EditContext(roleValue);  
    }
   
    public async Task GetFilteredPeople()
    {
        LoggedInUser = await sessionStorage.GetItemAsync<AuthenticatedUser>("user");
		await GetPeople();
		IsMatchFound = true;
    }
	private async Task<string> MakeUpRequestUri()
	{
		//role=Leader,Sublead,Member,Related&class=ItLeadership,BizSysAnalysis,DatabaseArchDesign,DataAdminAnalysis,InstructionalTech,ItProjectMgt,ItSecurityPrivacy,ItUserSupport,ItMultiDiscipline,Networks,SoftwareAdminAnalysis,SoftwareDevEng,SystemDevEng,UserExperience,WebAdminDevEng&campus=BL,IN,CO,EA,FW,KO,NW,SB,SE&area=uits,edge
		if ( roleValue != 0)
		{			
			queryParams.Add("role", roleValue.ToString());		
		}
		
		if (responsibility != Responsibilities.None)
		{			
			queryParams.Add("class", responsibility.ToString());			
		}
		
		if (campus != 0)
		{			
			queryParams.Add("campus", campus.ToString());			
		}
		
		if (areaValue != 0)
		{			
			queryParams.Add("area", areaValue.ToString());		
		}

		return QueryHelpers.AddQueryString("/people", queryParams);
	}

	private List<string> GetSelctedValues(Enum enumValue)
	{
		List<string> checkedValues = new List<string>();
		checkedValues = enumValue.ToString().Split(',').Select(r => r.Trim()).ToList(); 
		checkedValues.RemoveAll(i => i == "None");
		checkedValues.RemoveAll(i => i == "0");
		return checkedValues;
	}
	
	private async Task GetPeople()
	{
		RequestUri = await MakeUpRequestUri();
		Console.WriteLine($"finalCheckedValues Count : {queryParams.Count()} and {string.Join(",", queryParams.Values)}");			

		if (queryParams.Values.Count() == 0)
		{
			Console.WriteLine($"finalCheckedValues Count : {queryParams.Count()} and {string.Join(",", queryParams.Values)}");			

			peopleList = await GetWithErrorHandling<List<Person>>("/people");
			Console.WriteLine($"People Count : {peopleList.Count()}");			
		}
		else
		{			
			peopleList = await GetWithErrorHandling<List<Person>>(RequestUri);
		}
	} 
	private async Task ExportResultsToCSV()
    {
        var builder = new System.Text.StringBuilder();
        builder.AppendLine(Person.CsvHeader);
        foreach (var person in peopleList)
        {
            builder.AppendLine(person.AsCsvRow);
        }
        await JSRuntime.InvokeVoidAsync("saveAsFile", Person.CsvFileName, System.Text.Encoding.UTF8.GetBytes(builder.ToString()));
    }
	private async Task<T> GetWithErrorHandling<T>(string uri, string error = null)
	{
		var result = default(T);

		try
		{
			var resp = await Api().GetAsync(uri);

			if(resp.StatusCode != HttpStatusCode.OK)
			{
				var message = string.IsNullOrWhiteSpace(error)
					? $"Failed to Get {resp.RequestMessage.RequestUri} Status {resp.StatusCode} {resp.ReasonPhrase}"
					: error;
				GeneralException = new Exception(message);
				return result;
			}

			// The request succeeded, try to deserialize it.
			var stringResult = await resp.Content.ReadAsStringAsync();
			// We have to use Newtonsoft to make sure our StringEnumConverter work.
			result = JsonConvert.DeserializeObject<T>(stringResult, Json.JsonSerializerSettings);
		}
		catch(Exception ex)
		{
			GeneralException = ex;
			return result;
		}

		return result;
	}   
    
	public void Dispose(){ }
    
}