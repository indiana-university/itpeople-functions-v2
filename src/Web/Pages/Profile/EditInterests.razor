@using Models
@using Models.Enums
@using Newtonsoft.Json
@using web.Shared
@using System.Web
@using RivetBlazor.Components
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@using System.Net
@using System.Threading
@implements IDisposable
@inherits PageBase
@inject NavigationManager Navigation
@page "/people/{NetId}/EditInterests"

<Title Value="Edit Interests" /><br/>
<div class="rvt-container" style="max-width: 1440px; margin: auto;">
	<div class="rvt-grid">
		<div class="rvt-grid__item">
		   <nav class="">
				<ol class="rvt-breadcrumbs">
					<li aria-current="page">
						<ul class="rvt-list rvt-plain-list rvt-inline-list">
							<li><a href="/">Home</a></li>
							<li>Profiles</li>
							<li><a href="/People/@NetId">@ProfileName</a></li>
						</ul>
					</li>
				</ol>
			</nav>
		</div>
	</div>
</div>
<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<DisplayException Ex=@GeneralException />

	<AuthenticatedView>
		<NotAuthenticated>
			<p>
				You must login to view this resource.
			</p>
			<p>
				<a class="rvt-button" href=@GetLoginUri()>Log In</a>
			</p>
		</NotAuthenticated>
		<Authenticated>
			<h1 class="rvt-modal__title">Edit Professional Interests</h1>
			<Loader Loading="ShowLoader">
				@if(UpdatedPerson != null)
				{
					<EditForm EditContext="@FormContext">
						<DataAnnotationsValidator />
						<ValidationSummary />
						<br />
							<ul class="rvt-list rvt-plain-list rvt-inline-list">
								@foreach (var Interest in ExpertiseAsList)
								{
									@if(string.IsNullOrWhiteSpace(Interest) == false) {
										<li>
											<span class="rvt-badge">@Interest
												<button type="button" class="rvt-button rvt-button--plain rvt-p-all-xxs" title="remove" style="height: auto;" @onclick="@(()=> RemoveInterest(Interest))">
													<rvt-icon name="trash"></rvt-icon><span class="rvt-sr-only">trash</span>
												</button>
											</span>
										</li>
									}

								}
							</ul>


						<SuggestionButtons T=SuggestionItem Label="Search" Placeholder="Type an Interest"
							Description="Type an interest and then click a button in the results below to add it to this profile."
							ButtonClickedAction=AddInterest EnterClicksFirstSuggestion=true
							AsyncSuggestionGetter=GetSuggestions DisplayLambda=@(s => s.Name) />

						<p>
							@if(ShowSaveMessage)
							{
								<div class="rvt-inline-alert rvt-inline-alert--standalone rvt-inline-alert--info rvt-m-tb-sm">
									<span class="rvt-inline-alert__icon">
										<rvt-icon name="info-circle" />
									</span>
									<span class="rvt-inline-alert__message" id="radio-list-message">
										Your changes have not yet been saved.
									</span>
								</div>
							}
							<button type="button" @onclick=SaveChanges class="rvt-button" disabled="@(ProfileFormInvalid || ShowLoader)">Save</button>
						</p>
					</EditForm>
				}
			</Loader>
		</Authenticated>
	</AuthenticatedView>
</div>

@code {

	[Parameter]
	public string NetId { get; set; }
	public EntityPermissions CrudPerms;
	private string ProfileName;
	private string ContextPlaceholder = "";
	private EditContext FormContext;
	protected bool ProfileFormInvalid = false;
	private bool ShowSaveMessage = false;
	protected bool ShowLoader = false;
	protected IDisposable Loading()
		=> new DisposableLoader(s => ShowLoader = s, StateHasChanged);
	public Person UpdatedPerson = new Person();
	private List<string> ExpertiseAsList = new List<string>();

	protected override async Task OnInitializedAsync()
	{
		await SetLoggedInUser();
		FormContext = new EditContext(ContextPlaceholder);
		if (LoggedInUser != null)
			await GetPersonProfile();
	}
	private async Task GetPersonProfile()
	{
		using(Loading())
		{
			var response = await Get<Person>($"/people/{NetId}", $"No person matching the given username `{NetId}` has been found.");
			UpdatedPerson = response.Value;
			CrudPerms = response.Permissions;

			ProfileName = UpdatedPerson?.Name ?? "Not Found";

			var expertiseString = UpdatedPerson?.Expertise ?? "";
			ExpertiseAsList = expertiseString.Split(',').Select(r => r.Trim()).ToList();

			if (!CrudPerms.HasFlag(EntityPermissions.Put))
			{
				ProfileFormInvalid = true;
				GeneralException = new Exception($"You do not have permission to modify.");
			}
		}
	}

	private void RemoveInterest(string interest)
	{
		ExpertiseAsList.Remove(interest);
		ShowSaveMessage = true;
	}

	private void AddInterest(SuggestionItem item)
	{
		if (item == null || string.IsNullOrWhiteSpace(item.Name))
		{
			return;
		}

		// If interest includes a comma it is actually multiple interests at once.
		var newInterests = item.Name
			.Split(",")
			.Select(e => e.Trim().ToLower())
			.Where(e => string.IsNullOrWhiteSpace(e) == false);

		foreach (var i in newInterests)
		{
			if (ExpertiseAsList.Contains(i.Trim().ToLower()) == false)
			{
				ExpertiseAsList.Add(i.Trim().ToLower());
				ShowSaveMessage = true;
			}
		}
		StateHasChanged();// Needed because this is invoked by a child component
	}

	private async Task SaveChanges()
	{
		try
		{
			using(Loading())
			{
				// Make an in-memory copy of Person to PUT to the server.
				var objToPut = DeepCopy(UpdatedPerson);
				// Update objToPut's Expertise
				objToPut.Expertise = string.Join(",", ExpertiseAsList);

				var url = $"/people/{UpdatedPerson.Id}";

				var response = await Put<Person>(url, objToPut, $"An error was encountered attempting to update Expertise at {url}");
				if(response.RawResponse.IsSuccessStatusCode)
				{
					UpdatedPerson = response.Value;
					ExpertiseAsList = UpdatedPerson.Expertise.Split(',').Select(r => r.Trim()).ToList();
					ShowSaveMessage = false;
					Navigation.NavigateTo($"/People/{NetId}");
				}
			}
		}
		catch (Exception ex)
		{
			GeneralException = ex;
		}
	}

	private class SuggestionItem
	{
		public double Count { get; set; }
		public string Name { get; set; }
	}

	private class SuggestionResponse
	{
		public List<SuggestionItem> Items { get; set; }
	}

	private async Task<List<SuggestionItem>> GetSuggestions(string searchTerm)
	{
		var output = new List<SuggestionItem>();
		// Using a new client instead of API so we don't send the users bearer token to Stack Exchange
		using (var client = new HttpClient())
		{
			var response = await client.GetAsync($"https://api.stackexchange.com/2.2/tags?order=desc&site=stackoverflow&min=4000&sort=popular&inname={HttpUtility.UrlEncode(searchTerm.ToLower())}");
			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<SuggestionResponse>();
				//Make sure the user's input is the first item in the list, with no duplicates.
				var rawSuggestions = result.Items;
				var exactMatch = rawSuggestions.FirstOrDefault(s => s.Name.ToLower() == searchTerm.ToLower());
				if(exactMatch != null)
				{
					rawSuggestions.Remove(exactMatch);
				}
				rawSuggestions.Insert(0, new SuggestionItem { Name = searchTerm.ToLower(), Count = 0 });
				output = rawSuggestions.Take(10).ToList();
			}
			else
			{
				output = new List<SuggestionItem> { new SuggestionItem { Name = searchTerm.ToLower(), Count = 0 } };
			}
		}
		return output;
	}

	public void Dispose() { }
}