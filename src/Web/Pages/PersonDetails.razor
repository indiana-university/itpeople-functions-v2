@using Models
@using Models.Enums
@using RivetBlazor.Components
@using web.Shared
@using System.Net
@using System.Linq
@using Newtonsoft.Json
@using System.Collections
@using System;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@inject IHttpClientFactory ClientFactory
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@implements IDisposable
@page "/People/{NetId}"

<br />
<div class="rvt-container" style="max-width: 1440px; margin: auto;">
    <div class="rvt-grid">
        <div class="rvt-grid__item">
            <nav class="">
                <ol class="rvt-breadcrumbs">
                    <li aria-current="page">
                        <ul class="rvt-list rvt-plain-list rvt-inline-list">
                            <li><a href="/">Home</a></li>
                            <li>Profiles</li>
                            <li>@NetId</li>
                        </ul>
                    </li>
                </ol>
            </nav>
        </div>
    </div>
</div>
 
<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<AuthenticatedView>
		<NotAuthenticated>
			<p>
				You must login to view this resource.
			</p>
			<p>
				<a class="rvt-button" href="/SignIn?Destination=/People">Log In</a>
			</p>
		</NotAuthenticated>
		<Authenticated>
        @if( peopleList.Count() != 0)
        {            
			@foreach (var person in peopleList)
            {               
                <div>
                    <div class="rvt-container" style="max-width: 1440px; margin: auto;">
                        <div class="rvt-bg-white">
                            <div class="rvt-grid" style="justify-content: center;">
                                <div class="rvt-grid__item-9-md-up rvt-text-center rvt-m-top-md">
                                    <h1 class="rvt-ts-32 rvt-ts-41-lg-up rvt-text-bold">@person.Name</h1>
                                    <div class="rvt-ts-26">@person.Position</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>                
                <div class="rvt-bg-white">
                    <div class="rvt-container" style="max-width: 1440px; margin: auto;">
                        <div class="rvt-grid rvt-p-top-lg" data-testid="profile-page">
                            <div class="rvt-grid__item-6-md-up rvt-p-all-lg">
                                <div class="rvt-grid">
                                    <div class="rvt-grid__item rvt-border-all rvt-border-radius rvt-bg-white" style="overflow: auto;">
                                        <div class="rvt-grid">
                                            <div class="rvt-grid__item rvt-bg-cream rvt-border-bottom rvt-p-all-xs rvt-p-left-md rvt-p-right-md rvt-ts-18 rvt-text-bold" style="color: rgb(51, 51, 51);">Contact Information</div>
                                        </div>
                                        <div class="rvt-grid">
                                            <div class="rvt-grid__item rvt-p-all-md">
                                                <div class="list-dividers">
                                                    <div>
                                                        <div><strong>Location: </strong>@person.Location</div>
                                                        <div><strong>Campus: </strong>@person.Campus</div>
                                                        <div><strong>Email: </strong><a href="mailto:@person.CampusEmail">@person.CampusEmail</a></div>
                                                        <div><strong>Phone: </strong>@person.CampusPhone</div>
                                                        <div><strong>Department: </strong><a href="/departments/@person.DepartmentId">@person.Department.Name</a></div>
                                                    </div>
                                                    <div>
                                                        <div style="float: right;">                                                           
                                                            <button type="button" title="Edit Responsibilities" class="rvt-button rvt-button--plain" data-modal-trigger="modal-form-r" @onclick="@(e => EditResponsibilities())">
                                                                <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                                                                    <use xlink:href="/_content/RivetBlazor/css/icons/rvt-icons.svg#rvt-icon-pencil"></use>
                                                                </svg>
                                                                <span class="rvt-m-left-xs rvt-sr-only">Edit Responsibilities</span>
                                                            </button>  
                                                            <ModalForm Id="modal-form-r" Title="Edit Responsibilities" SubmitButtonText="Update" Item=@person.Responsibilities OnSubmit=@UpdateResponsibilities @ref=form>
                                                                <RivetInputFlag @bind-Value="SelectedResponsibilities" Description="Check all the relevant responsibilities performed"  Inline=@inline />
                                                            </ModalForm>
                                                        </div>
                                                        <h2 class="rvt-ts-23 rvt-text-bold">Responsibilities</h2>
                                                        <p>What kinds of work do you do on a day-to-day basis?</p>                                                  
                                                            @* <ul class="rvt-list rvt-plain-list">
                                                                <li>@SelectedResponsibilities</li>
                                                            </ul>  *@
                                                            @foreach (var item in SelectedResponsibilities.ToString().Split(','))
                                                            {
                                                                <ul class="rvt-list rvt-plain-list">
                                                                    <li>@GetEnumDisplayName(item)</li>
                                                                </ul>
                                                            }
                                                            
                                                            @* @foreach (var selecedEnum in SelectedResps)
                                                            {
                                                                <ul class="rvt-list rvt-plain-list">
                                                                    <li>@selecedEnum</li>
                                                                </ul>
                                                            }   *@
                                                            
                                                    </div>
                                                    <div>
                                                         <div style="float: right;">                                                            
                                                            <button type="button" title="Edit Interests" class="rvt-button rvt-button--plain" data-modal-trigger="modal-form-i" @onclick="@(e => UpdateInterests())">
                                                                <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                                                                    <use xlink:href="/_content/RivetBlazor/css/icons/rvt-icons.svg#rvt-icon-pencil"></use>
                                                                </svg>
                                                                <span class="rvt-m-left-xs rvt-sr-only">Edit Interests</span>
                                                            </button>
                                                            <div class="rvt-modal" id="modal-form-i" role="dialog" aria-labelledby="modal-form-i-title" aria-hidden="true" tabindex="-1" current="">  
                                                                <div class="rvt-modal__inner">
                                                                    <header class="rvt-modal__header">
                                                                        <h1 class="rvt-modal__title" id="modal-form-title">Edit Interests</h1>
                                                                    </header>
                                                                    <div class="rvt-modal__body">
                                                                        <EditForm OnValidSubmit="UpdateInterests" EditContext="@editContext">
                                                                            <DataAnnotationsValidator />                                                                            
                                                                            <div class="rvt-modal__body">
                                                                                <ul class="rvt-list rvt-inline-list"></ul>
                                                                                <div>
                                                                                    <div class="rvt-input rvt-m-bottom-sm">                                                                                        
                                                                                        <label for="search" class="rvt-sr-only">Search</label>
                                                                                        <input id="search" class="rvt-input-group__input" aria-describedby="" aria-invalid="false" type="text" name="q" input="[object Object]" meta="[object Object]" value=""> 
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </EditForm>
                                                                    </div>
                                                                    <button type="button" class="rvt-button rvt-modal__close" data-modal-close="modal-form-i">
                                                                        <span class="rvt-sr-only">Close</span>
                                                                        <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                                                                            <path fill="currentColor" d="M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z"/>
                                                                        </svg>
                                                                    </button>                                                                    
                                                                </div>
                                                            </div>
                                                        </div>  
                                                        <h2 class="rvt-ts-23 rvt-text-bold">Professional interests</h2>
                                                        <p>What kinds of skills, technologies, or languages do you want to work with or learn about?</p>
                                                        @foreach (var Interest in person.Expertise.Split(','))
                                                        {
                                                            <ul class="rvt-list rvt-plain-list rvt-inline-list">
                                                                <li><span class="rvt-badge">@Interest</span></li>
                                                            </ul>
                                                        }                                                        
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <div class="rvt-grid__item-6-md-up rvt-p-all-lg">
                            <div class="rvt-grid">
                                <div class="rvt-grid__item rvt-border-all rvt-border-radius rvt-bg-white" style="overflow: auto;">
                                    <div class="rvt-grid"><div class="rvt-grid__item rvt-bg-cream rvt-border-bottom rvt-p-all-xs rvt-p-left-md rvt-p-right-md rvt-ts-18 rvt-text-bold" style="color: rgb(51, 51, 51);">IT Units</div>
                                </div>
                                <div class="rvt-grid">
                                    <div class="rvt-grid__item rvt-p-all-md">
                                        <div class="list-dividers profile-units">
                                            <div>
                                                <div class="rvt-grid">
                                                    <div class="rvt-grid__item">
                                                        @if (PersonUnits.Count() != 0)
                                                        {
                                                            @foreach (var unit in PersonUnits)
                                                            {
                                                                <a href="/units/@unit.Id"><h2 class="rvt-ts-23 rvt-text-bold">@unit.Name</h2></a>
                                                                <div class="rvt-m-bottom-sm">@unit.Description</div>
                                                                <div style="float: right;">                                                           
                                                                <button type="button" title="Show Unit Details" class="rvt-button rvt-button--plain" data-modal-trigger="modal-form-r" @onclick="@(e => ShowUnitDetails())">
                                                                    <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                                                                        <use xlink:href="/_content/RivetBlazor/css/icons/rvt-icons.svg#rvt-icon-toggle"></use>
                                                                    </svg>
                                                                    <span class="rvt-m-left-xs rvt-sr-only">Show Unit Details</span>
                                                                </button> 
                                                            </div>
                                                            <button class="rvt-button--plain expanded" style="position: absolute; right: 0px;">
                                                                <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                                                                    <path fill="currentColor" d="M8,12.46a2,2,0,0,1-1.52-.7L1.24,5.65a1,1,0,1,1,1.52-1.3L8,10.46l5.24-6.11a1,1,0,0,1,1.52,1.3L9.52,11.76A2,2,0,0,1,8,12.46Z"></path>
                                                                </svg>
                                                            </button>
                                                            }                                                            
                                                        }
                                                        else 
                                                        {
                                                            <p> No Units</p>

                                                        }                                                       
                                                       
                                                    </div>                                                
                                                </div>
                                            </div>                                  
                                        </div>
                                    </div>  
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
  
            }
			<DisplayException Ex=@GeneralException />
        }
        else
        {
            <p> Couldn't find a profile with the given username: @NetId. Check the username and try again. </p> 
        }

		</Authenticated>
	</AuthenticatedView>
</div>

@code {
	private EntityPermissions CrudPerms;
	private Exception GeneralException;
	private Exception ModalException;
	private AuthenticatedUser LoggedInUser;
    private Person person = new Person();
	private List<Person> peopleList = new List<Person>();
	private IEnumerable<UnitResponse> PersonUnits = new List<UnitResponse>();
	private Responsibilities SelectedResponsibilities = Responsibilities.None;
    private static int enumLength = Enum.GetNames(typeof(Responsibilities)).Length;
    private string[] SelectedResps;
    [Parameter]    public string NetId {get; set; }
    public string InterestList {get; set; } = "None";
    private EditContext editContext;
	private bool inline = false; 
	private HttpClient Api() => ClientFactory.CreateClient("Api");
    private ModalForm<Responsibilities> form;
    private HttpResponseMessage formResponse = null;


    protected override async Task OnInitializedAsync()
	{   
        editContext = new EditContext(InterestList);
        await Task.WhenAll(new[] { GetPersonProfile(), GetPersonUnitMemberships() }); 
    }
    private async Task GetPersonProfile()
	{
		var response = await Api().GetAsync($"/people/{NetId}");
		if(response.IsSuccessStatusCode)
		{
            string responsemsg = await response.Content.ReadAsStringAsync();
            var person = JsonConvert.DeserializeObject<Person>(responsemsg);
            SelectedResponsibilities = person.Responsibilities;
            SelectedResps = person.Responsibilities.ToString().Split(','); 
            InterestList = person.Expertise;
            @* await GetDisplayName(); *@
            peopleList.Add(person);			
		}
        else
        {
            GeneralException = new Exception($"Failed to fetch the person's details..");
			return;
        }
       		
		GetEntityPermissions(response);
	}
    private async Task GetPersonUnitMemberships()
	{
		var response = await Api().GetAsync($"/people/{NetId}/memberships");
		if(response.IsSuccessStatusCode)
		{
           var memberships = await response.Content.ReadFromJsonAsync<List<UnitMemberResponse>>();
		    PersonUnits = memberships.Select(m => m.Unit).Distinct();		
		}
        else
        {
            GeneralException = new Exception($"Failed to fetch UnitMemberships for {NetId}.");
			return;
        }		
	}

    private async Task EditResponsibilities()
    {
    }
    private async Task ShowUnitDetails()
    {
    }
    private async Task UpdateResponsibilities()
    {
        @* TODO collect selected Responsibilities and update person's responsibilities *@
        
        try
        {
            if (person.Responsibilities == 0)
            {
                formResponse = await Api().PostAsJsonAsync<Person>("/people", person);
            }
            else
            {
                formResponse = await Api().PutAsJsonAsync<Person>($"/people/{person.Netid}", person);
            }

            if (formResponse.IsSuccessStatusCode == true)
            {
                string responsemsg = await formResponse.Content.ReadAsStringAsync();
                var updatedPersonDetails = JsonConvert.DeserializeObject<Person>(responsemsg);
                person.Responsibilities = updatedPersonDetails.Responsibilities;                            
                InterestList = person.Expertise;                
                await form.Close();
            }
            @* await GetDisplayName(); *@
        }
        catch (Exception ex)
        {
            ModalException = ex;
        }
        @* try
        {
            @* SelectedResps = GetDisplayName(SelectedResponsibilities).ToString().Split(",").ToArray(); *@   
            //SelectedItems = SelectedResps.Select(a => (Responsibilities)Enum.Parse(typeof(Responsibilities), a));    
            @* await GetDisplayName();

        }
        catch (Exception ex)
        {
            ModalException = ex;
        }
               
        await form.Close(); *@
        StateHasChanged();

        @* if (form != null)
        {
            form.ResetState();
            formResponse = null;
        } *@

    }
    public string GetEnumDisplayName(string enumValue)
    {
        Console.WriteLine($"From GetEnumDisplayName: {enumValue}");

        var fieldInfo = SelectedResponsibilities.GetType().GetFields();
        Console.WriteLine($"From fieldInfo: {fieldInfo.Length} and {enumValue}");
        var field = fieldInfo.FirstOrDefault(f =>f.Name == enumValue);
        if(field == null)
        {
            return enumValue;

        }
        Console.WriteLine($"From field: {field}");
        var step3= field.GetCustomAttribute<DisplayAttribute>();
        Console.WriteLine($"From step3: {step3}");
        var step4= step3?.GetName() ?? field.Name;
        Console.WriteLine($"From step4: {step4}");

        return step4;
    }

    public async Task GetDisplayName(string enumValue)
    {
        List<string> FinalEnumName = new List<string>();
        var selected = SelectedResponsibilities.ToString().Split(',').ToArray();
        Console.WriteLine($"{selected.Count()}");

        Console.WriteLine($"{string.Join("," , selected)}");
        FinalEnumName.AddRange(selected);
        Console.WriteLine($"{FinalEnumName.Count()}");
        @* for (int i = 0; i < FinalEnumName.Count(); i++)
        {
            string s = FinalEnumName[i].TrimEnd(' ');
            Console.WriteLine($"{s}");

            var finalEnumName = await GetEnumDisplayName(s);

            Console.WriteLine($"{finalEnumName}");
            SelectedResps.Add(finalEnumName);
            StateHasChanged();            
        } *@
        foreach (var enumItem in FinalEnumName)
        {
            Console.WriteLine($"{enumItem}");

            var finalEnumName = GetEnumDisplayName(enumItem);

            Console.WriteLine($"{finalEnumName}");
            SelectedResps.Append(finalEnumName);
        }        
      
    }
    private async Task UpdateInterests()
    {
        @* TODO collect enterd interests and update person's expertise *@

        try
        {
            if (person.Expertise == null)
            {
                formResponse = await Api().PostAsJsonAsync<Person>("/people", person);
            }
            else
            {
                formResponse = await Api().PutAsJsonAsync<Person>($"/people/{person.Netid}", person);                
            }

            if (formResponse.IsSuccessStatusCode == true)
            {
                await form.Close();
            }
        }
        catch (Exception ex)
        {
            ModalException = ex;
        }        
    }    
    private void GetEntityPermissions(HttpResponseMessage resp)
	{
		// Pluck the user permissions from the response header. Eg. "GET, PUT"
		var permsString = resp.Headers.SingleOrDefault(h => h.Key == "x-user-permissions").Value?.Single();
		
		// Loop over the string values from the header, parse them one-by-one, and build-up CrudPerms
		CrudPerms = 0;// Reset permissions to 0.
		foreach(var p in permsString.Split(','))
		{
			var ep = Enum.Parse<EntityPermissions>(p.Trim(), true);
			CrudPerms |= ep;
		}
	}

    
	public void Dispose(){}
    
}