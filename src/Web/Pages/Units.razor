@using Models
@using RivetBlazor.Components
@using System.Net
@using System.Linq
@using System.Collections
@inject IHttpClientFactory ClientFactory
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@implements IDisposable
@page "/Units"

<div class="rvt-container rvt-container--senior rvt-container--center rvt-p-bottom-xl rvt-p-top-lg">
	<h1>Units</h1>
	<p>
		IT Units are organizations of people doing IT work. Some IT Units are primarily responsible for departmental IT support, while others are principally engaged in IT service development and delivery.
	</p>

	<p>
		Use the search bar to find people or units doing IT work at IU.
	</p>

	<DisplayException Ex=@GeneralException />

	@if(MyUnits.Count() > 0)
	{
		<h2 class="rvt-ts-md">My Units</h2>
		<div class="rvt-grid">
			@foreach(var unit in MyUnits)
			{
				<div class="rvt-grid__item-5-md-up rvt-p-bottom-lg">
					<a class="rvt-link-bold" href="/units/@unit.Id">@unit.Name</a>
					<p class="rvt-m-top-remove">@unit.Description</p>
				</div>
			}
		</div>
	}

	@if(ActiveUnits.Count() > 0)
	{
		<h2 class="rvt-ts-md">Active Units</h2>
		<div class="rvt-grid">
			@foreach(var unit in ActiveUnits)
			{
				<div class="rvt-grid__item-5-md-up rvt-p-bottom-lg">
					<a class="rvt-link-bold" href="/units/@unit.Id">@unit.Name</a>
					<p class="rvt-m-top-remove">@unit.Description</p>
				</div>
			}
		</div>
	}

	@if(ArchivedUnits.Count() > 0)
	{
		<h2 class="rvt-ts-md">Archived Units</h2>
		<div class="rvt-grid">
			@foreach(var unit in ArchivedUnits)
			{
				<div class="rvt-grid__item-5-md-up rvt-p-bottom-lg">
					<a class="rvt-link-bold" href="/units/@unit.Id">@unit.Name</a>
					@if(unit.Active == false)
					{
						<span class="rvt-inline-alert--standalone rvt-inline-alert--info rvt-m-left-xs rvt-ts-xs">Archived</span>
					}
					<p class="rvt-m-top-remove">@unit.Description</p>
				</div>
			}
		</div>
	}
</div>

@code {
	private HttpClient Api() => ClientFactory.CreateClient("Api");
	private IEnumerable<UnitResponse> MyUnits = new List<UnitResponse>();
	private IEnumerable<UnitResponse> ActiveUnits = new List<UnitResponse>();
	private IEnumerable<UnitResponse> ArchivedUnits = new List<UnitResponse>();
	private AuthenticatedUser LoggedInUser;
	private Exception GeneralException;
	
	protected override async Task OnInitializedAsync()
	{
		LoggedInUser = await sessionStorage.GetItemAsync<AuthenticatedUser>("user");
		if(LoggedInUser == null)
		{
			GeneralException = new Exception("You must be logged in to view this page.  Could not determine the username of the current user.");
			return;
		}

		// Fetch my units and the whole list of units simultaneously.
		await Task.WhenAll(new[] { FetchMyUnits(), FetchUnits() });
	}

	private async Task FetchMyUnits()
	{
		var resp = await Api().GetAsync($"/people/{LoggedInUser.Username}/memberships");
		//var resp = await Api().GetAsync($"/people/1/memberships");
		if(resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch UnitMemberships for {LoggedInUser.Username}.");
			return;
		}
		var memberships = await resp.Content.ReadFromJsonAsync<List<UnitMemberResponse>>();
		MyUnits = memberships.Select(m => m.Unit).Distinct();
	}

	private async Task FetchUnits()
	{
		var resp = await Api().GetAsync($"/Units");
		if(resp.StatusCode != HttpStatusCode.OK)
		{
			GeneralException = new Exception($"Failed to fetch Units.");
			return;
		}
		var units = await resp.Content.ReadFromJsonAsync<List<UnitResponse>>();
		ActiveUnits = units.Where(u => u.Active);
		ArchivedUnits = units.Where(u => u.Active == false);
	}

	public void Dispose(){}
}