@using System.Net
@using System.Threading;
@using Blazored.LocalStorage
@implements IDisposable
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime;
@inject NavigationManager Navigation

@if(IsAuthenticated)
{
	@if(IsExpired)
	{
		<div class="rvt-alert rvt-alert--warning rvt-m-tb-md">
			<h1 class="rvt-alert__title">Session Expired</h1>
			<p class="rvt-alert__message">
				<p>
					Your session has expired.  You will need to login again before making additional requsts.
				</p>
				<p>
					<a class="rvt-button" href="/SignIn?Destination=@(WebUtility.UrlEncode(new Uri(Navigation.Uri).PathAndQuery))">Log In</a>
				</p>

			</p>
		</div>
	}
	
	@Authenticated
}
else
{
	@NotAuthenticated
}

@code {
	[Parameter]
	public RenderFragment Authenticated { get; set; }

    [Parameter]
	public RenderFragment NotAuthenticated { get; set; }

	private AuthenticatedUser User;
	private bool IsAuthenticated => User != null;
	
	private string Id = System.Guid.NewGuid().ToString();
	private DotNetObjectReference<AuthenticatedView>? jsRef;
	private bool IsExpired = false;

	protected override async Task OnInitializedAsync()
	{
		User = await localStorage.GetItemAsync<AuthenticatedUser>("user");
		await UpdateIsExpired();
		jsRef = DotNetObjectReference.Create(this);
		SetupInterop();
	}

	private class InstanceReference
	{
		public string Id { get; set; }
		public DotNetObjectReference<AuthenticatedView> Ref { get; set; }
	}

	private void SetupInterop()
	{
		// Cast JSRuntime so we can use InvokeVoid, instead of InvokeVoidAsync
		var js = (IJSInProcessRuntime)JSRuntime;
		// Add Id to the collection defined in interop.js
		js.InvokeVoid("sessionInstances.push", new InstanceReference { Id = Id, Ref = jsRef });
	}

	private void TeardownInterop()
	{
		// Cast JSRuntime so we can use InvokeVoid, instead of InvokeVoidAsync
		var js = (IJSInProcessRuntime)JSRuntime;
		// Add Id to the collection defined in interop.js
		js.InvokeVoid("removeSessionInstance", Id);
	}

	[JSInvokable]
	public async void StorageChanged()
	{
		Console.WriteLine("Greetings from StorageChanged()!");
		// Update the user
		User = await localStorage.GetItemAsync<AuthenticatedUser>("user");
		await UpdateIsExpired();
	}

	[JSInvokable]
	public async Task UpdateIsExpired()
	{
		Console.WriteLine("Greetings from UpdateIsExpired()!");
		var result = false;
		if(User != null && User.Expires <= DateTimeOffset.Now)
		{
			result = true;
		}

		if(IsExpired != result)
		{
			Console.WriteLine($"\tIsExpired changed from {IsExpired} to {result}");
			IsExpired = result;
			StateHasChanged();
		}
	}

	public void Dispose()
	{
		TeardownInterop();
	}
}