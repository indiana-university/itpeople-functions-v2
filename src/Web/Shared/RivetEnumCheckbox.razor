@using System
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations; 
@inherits InputBase<List<string>>;
@implements IDisposable;
@using System.Reflection;

<fieldset class="rvt-m-top-md">
	<legend class="rvt-ts-xs">
		<strong>@Legend</strong>
	</legend>

	<ul class=@(Inline ? "rvt-inline-list rvt-border-radius" : "rvt-plain-list rvt-border-radius") style=@GetValidationStyle()>
		@if (Value != null)
		{
			foreach (var option in Enum.GetValues(Type))
			{
				var id = _Id + option;
				var selected = Value.Contains(option.ToString());
				<li>

					<input id="@id" type="checkbox" checked=@selected @onchange="eventArgs => { OnCheckboxClicked(option.ToString(), (bool) eventArgs.Value); }" />
					<label for="@id" class="rvt-m-right-sm">@GetEnumDisplayName(option.ToString())</label>
				</li>
			}
		}
	</ul>
	<Description Value="@Description" Id="@_Id" />
	<ValidationMessages Messages="@_ValidationMessages" Id="@_Id" />
</fieldset>

@code{
	[Parameter] ///<summary> The text used in th HTML Fieldset Legend tag.</summary>
	public string Legend { get; set; }
	[Parameter] ///<summary> Should the checkboxes be displayed as a list or an inline-list.</summary>
	public bool Inline { get; set; } = false;
	[Parameter] ///<summary> The type for the enum
	public Type Type { get; set; }
	[Parameter] ///<summary> Information text, displayed in a smaller font, beneath the HTML Input element.</summary>
	public string Description { get; set; }

	private string _Id = $"id_{System.Guid.NewGuid().ToString()}";
	private List<string> _ValidationMessages = new List<string>();

	protected override void OnInitialized()
	{
		if (Type == null)
		{
			throw new Exception("Type parameter must be provided.");
		}
		//Subscribe to the OnValidationStateChanged event.
		base.EditContext.OnValidationStateChanged += ValidationStateChanged;
	}

	private void OnCheckboxClicked(string option, bool selected)
	{
		if (selected && !Value.Contains(option))
		{
			Value.Add(option);
		}
		else if (Value.Contains(option))
		{
			Value.Remove(option);
		}
		ValueChanged.InvokeAsync(Value).Wait();
		EditContext.NotifyFieldChanged(FieldIdentifier);
	}

	public string GetEnumDisplayName(string enumValue)
	{
		var field = Type.GetFields().FirstOrDefault(f => f.Name == enumValue);
		return field != null
			? field.GetCustomAttribute<DisplayAttribute>()?.GetName() ?? field.Name
			: enumValue;
	}

	private void ValidationStateChanged(object sender, ValidationStateChangedEventArgs e)
	{
		_ValidationMessages = this.EditContext.IsModified()
			? this.EditContext.GetValidationMessages(this.FieldIdentifier).ToList()
			: new List<string>();
	}

	private bool IsValid()
	{
		return _ValidationMessages.Count == 0;
	}

	private string GetValidationStyle()
	{
		return (_ValidationMessages.Count > 0)
			? "border-color: rgb(185, 45, 2); box-shadow: rgb(178, 43, 2) 0px 0px 0px 0.125rem;"
			: "";
	}

	protected override bool TryParseValueFromString(string value, out List<string> result, out string validationErrorMessage)
	{
		throw new NotImplementedException();
	}

	public void Dispose()
	{
		base.EditContext.OnValidationStateChanged -= ValidationStateChanged;
	}
} 