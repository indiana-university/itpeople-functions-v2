@implements IDisposable
@inject IJSRuntime JSRuntime;

<div class="rvt-modal"
	id="@Id"
	role="dialog"
	aria-labelledby="modal-example-title"
	aria-hidden="true"
	tabindex=-1>
	<div class="rvt-modal__inner">
		<header class="rvt-modal__header">
			<h1 class="rvt-modal__title" id="modal-example-title">@Title</h1>
		</header>
		<div class="rvt-modal__body">
			@Content
		</div>
		<div class="rvt-modal__controls">
			@Controls
		</div>
		<button type="button" class="rvt-button rvt-modal__close" data-modal-close="@Id">
			<span class="rvt-sr-only">Close</span>
			<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
				<path fill="currentColor" d="M9.41,8l5.29-5.29a1,1,0,0,0-1.41-1.41L8,6.59,2.71,1.29A1,1,0,0,0,1.29,2.71L6.59,8,1.29,13.29a1,1,0,1,0,1.41,1.41L8,9.41l5.29,5.29a1,1,0,0,0,1.41-1.41Z"/>
			</svg>
		</button>
	</div>
</div>


@code
{
	///<summary> The ID for this modal form. This is useful if you want to programatically close the form using Modal.close().</summary>
    [Parameter]
    public string Id {get; set;}

	///<summary> The title text that should appear at the top of the modal.</summary>
	[Parameter]
	public string Title {get;set;}

	///<summary> The rvt-modal__body of the modal.</summary>
	[Parameter]
	public RenderFragment Content { get; set; }

	///<summary> The content rvt-modal__controls div.</summary>
	[Parameter]
	public RenderFragment Controls { get; set; }

	public void ConfirmBeforeClose()
	{
		AddToModalConfirmBeforeCloseList();
	}

	public void DoNotConfirmBeforeClose()
	{
		RemoveFromModalConfirmBeforeCloseList();
	}

	public async Task Close()
	{
		await JSRuntime.InvokeVoidAsync("Modal.close", Id);
	}
	
	

	private async Task AddToModalConfirmBeforeCloseList()
	{
		// Cast JSRuntime so we can use InvokeVoid, instead of InvokeVoidAsync
		var js = (IJSInProcessRuntime)JSRuntime;
		// Add Id to the collection defined in interop.js
		js.InvokeVoid("modalsConfirmBeforeClose.push", Id);
	}
	private void RemoveFromModalConfirmBeforeCloseList()
	{
		// Cast JSRuntime so we can use InvokeVoid, instead of InvokeVoidAsync
		var js = (IJSInProcessRuntime)JSRuntime;
		// Remove Id from the collection defined in interop.js
		js.InvokeVoid("removeModalConfirmBeforeClose", Id);
	}
	
	public void Dispose()
	{
		// Make sure we remove Id from the collection of modals to watch in interop.js
		RemoveFromModalConfirmBeforeCloseList();
	}
}