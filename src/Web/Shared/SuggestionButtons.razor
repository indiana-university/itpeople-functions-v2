@using RivetBlazor.Components
@using Models;
@using Models.Enums;
@using System.Threading;
@using System.Web;
@using Newtonsoft.Json;
@typeparam T
@inject IHttpClientFactory ClientFactory;
@implements IDisposable;

<RivetInputText @bind-Value="SearchTerm" Label="Search" Placeholder=@Placeholder Description=@Description @oninput="e => SearchTermChanged(e.Value.ToString())" @onkeydown=SearchTermListenForEnter/>
@if(string.IsNullOrWhiteSpace(SearchTerm) == false)
{
	<ul class="rvt-plain-list rvt-border-all rvt-border-radius rvt-m-top-xs rvt-p-bottom-xs">
		@foreach (var suggestion in Suggestions)
		{
			<li>
				<a class="rvt-button rvt-button--secondary rvt-button--full-width" @onclick=@(() => ButtonClickedAction(suggestion)) >@DisplayLambda(suggestion)</a>
			</li>
		}
		
		@if(Suggestions.Count == 0)
		{
			<li><em>No matches found</em></li>
		}
	</ul>
}

@code
{
	///<summary> The text used in the HTML Label tag.</summary>
	[Parameter]
	public string Label { get; set; }

	///<summary> The text used in the RivetInputText Description.</summary>
	[Parameter]
	public string Description { get; set; }

	///<summary> The text used in the RivetInputText Placeholder.</summary>
	[Parameter]
	public string Placeholder { get; set; }

	///<summary> When true hitting the enter key while searching performs the same action as clicking the first suggestion.</summary>
	[Parameter]
	public bool EnterClicksFirstSuggestion { get; set; } = false;

	///<summary> The action performed to get selections based on a search term</summary>
	[Parameter]
	public Func<string, Task<List<T>>> AsyncSuggestionGetter { get; set; }
	
	///<summary> The action performed when a suggestion button is clicked.</summary>
	[Parameter]
	public Action<T> ButtonClickedAction { get; set; }
	
	///<summary> Takes a suggestion and generates the text to be displayed in a button.</summary>
	[Parameter]
	public Func<T, string> DisplayLambda { get; set; }

	private string SearchTerm = "";
	private List<T> Suggestions = new List<T>();
	private CancelableSuggestionsRequest SuggestionsRequest;

	
	private async Task SearchTermListenForEnter(KeyboardEventArgs e)
	{
		if (EnterClicksFirstSuggestion && (e.Code == "Enter" || e.Code == "NumpadEnter"))
		{
			Console.WriteLine("SearchTermListenForEnter() action should be performed here.");
		}
	}

	private async Task SearchTermChanged(string newValue)
	{
		SearchTerm = newValue;
		await UpdateSuggestions(newValue);
	}

	private void CancelSuggestionsRequestIfRunning()
	{
		var acceptableTaskStatus = new List<TaskStatus> { TaskStatus.RanToCompletion, TaskStatus.Canceled };
		if (SuggestionsRequest != null && acceptableTaskStatus.Contains(SuggestionsRequest.Task.Status) == false)
		{
			SuggestionsRequest.TokenSource.Cancel();
		}
	}

	private async Task UpdateSuggestions(string searchTerm)
	{
		if (string.IsNullOrWhiteSpace(searchTerm))
		{
			Suggestions = new List<T>();
			return;
		}

		// Cancel any currently running requests to the Stack Exchange API.
		CancelSuggestionsRequestIfRunning();

		// Make a cancelable request to the API and process the response.
		var ts = new CancellationTokenSource();
		SuggestionsRequest = new CancelableSuggestionsRequest
		{
			TokenSource = ts,
			Task = Task.Run(async () =>
			{
				// Pause before sending the request in case the user isn't done typing.
				// Additional keystrokes will cancel this request.
				await Task.Delay(500);

				if (ts.Token.IsCancellationRequested == false)// Only procede if this task has not been canceled.
				{
					Console.WriteLine($"This is where we'll invoke the user-provided method to update our list of suggestions\n\tSearching for: {searchTerm}");
					var response = await AsyncSuggestionGetter(searchTerm);
					
					// If this task was canceled before we got a response do not update Suggestions.
					if(ts.Token.IsCancellationRequested == false)
					{
						Suggestions = response;
					}
				}
			}, ts.Token)
		};

		await SuggestionsRequest.Task;
	}

	private class CancelableSuggestionsRequest
	{
		public Task Task { get; set; }
		public CancellationTokenSource TokenSource { get; set; }
	}

	public void Dispose() { }
}