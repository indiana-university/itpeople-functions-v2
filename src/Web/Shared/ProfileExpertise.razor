@using RivetBlazor.Components
@using Models;
@using Models.Enums;
@using System.Threading;
@using System.Web;
@using Newtonsoft.Json;
@inject IHttpClientFactory ClientFactory;
@implements IDisposable;

<div class="rvt-border-bottom rvt-m-bottom-lg rvt-p-bottom-lg">
	<div class="rvt-flex">
		<div class="rvt-grow-1">
			<h2 class="rvt-ts-23 rvt-text-bold">Professional interests</h2>
		</div>
		<div class="rvt-m-left-sm">
			@if(CrudPerms.HasFlag(EntityPermissions.Post))
			{
				<button title="Edit Interests" class="rvt-button rvt-button--plain" data-modal-trigger="modal-form-expertise" @onclick=ResetForm>
					<rvt-icon name="pencil" />
					<span class="rvt-m-left-xs rvt-sr-only">Edit Interests</span>
				</button>
			}
		</div>
	</div>
	<p>What kinds of skills, technologies, or languages do you want to work with or learn about?</p>
	<ul class="rvt-list rvt-plain-list rvt-inline-list">
		@if (string.IsNullOrWhiteSpace(Person.Expertise))
		{
			<li><em>None</em></li>
		}
		else
		{
			@foreach (var Interest in Person.Expertise.Split(","))
			{
				@if(string.IsNullOrWhiteSpace(Interest) == false)
				{
					<li><span class="rvt-badge">@Interest</span></li>
				}
			}
		}
	</ul>
</div>
<ModalForm Id="modal-form-expertise" Title="Edit Interests" SubmitButtonText="Save Changes" Item=@ExpertiseAsList OnSubmit=@SaveChanges ConfirmBeforeClose=@ConfirmModalClose @ref=Mf>
	<DisplayException Ex=@Ex />
	<ul class="rvt-list rvt-plain-list rvt-inline-list">
		@foreach (var Interest in ExpertiseAsList)
		{
			<li>
				<span class="rvt-badge">@Interest
					<button type="button" class="rvt-button rvt-button--plain rvt-p-all-xxs" title="remove" style="height: auto;" @onclick="@(()=> RemoveInterest(Interest))">
						<rvt-icon name="trash"></rvt-icon><span class="rvt-sr-only">trash</span>
					</button>
				</span>
			</li>
		}
	</ul>
	
	<SuggestionButtons Label="Search" Placeholder="Type an Interest" Description="Type an interest and then click a button in the results below to add it to this profile." ButtonClickedAction=AddInterest EnterClicksFirstSuggestion=true AsyncSuggestionGetter=GetSuggestions DisplayLambda=@(s => $"{s.Name}") />
	
</ModalForm>


@code {
	[Parameter]
	public EntityPermissions CrudPerms { get; set; }
	[Parameter]
	public Person Person { get; set; }
	// Enable two-way binding.
	[Parameter]
	public EventCallback<Person> PersonChanged { get; set; }

	private HttpClient Api() => ClientFactory.CreateClient("Api");
	private List<string> ExpertiseAsList = new List<string>();
	private ModalForm<List<string>> Mf;
	private bool ConfirmModalClose = false;
	private Exception Ex;

	private void ResetForm()
	{
		ExpertiseAsList = new List<string>();
		if (string.IsNullOrWhiteSpace(Person.Expertise) == false)
		{
			ExpertiseAsList.AddRange(
				Person.Expertise
					.Split(",")
					.Select(e => e.Trim().ToLower())
					.Where(e => string.IsNullOrWhiteSpace(e) == false)
			);
		}
		ConfirmModalClose = false;

		Mf.ResetState();
	}

	private void RemoveInterest(string interest)
	{
		ExpertiseAsList.Remove(interest);

		// We've made a change, confirm before closing the modal without saving changes.
		ConfirmModalClose = true;
		// Ensure that the submit button is available.
		Mf.ForceValid();
	}

	

	private async Task SaveChanges()
	{
		try
		{
			Person result;

			// Make an in-memory copy of Person to PUT to the server.
			var objToPut = JsonConvert.DeserializeObject<Person>(JsonConvert.SerializeObject(Person, Json.JsonSerializerSettings), Json.JsonSerializerSettings);
			// Update objToPut's Expertise
			objToPut.Expertise = string.Join(",", ExpertiseAsList);

			var url = $"/people/{Person.Id}";

			using (var apiClient = Api())
			{
				var reqJson = JsonConvert.SerializeObject(objToPut, Json.JsonSerializerSettings);
				var reqContent = new StringContent(reqJson, System.Text.Encoding.UTF8, "application/json");
				var response = await apiClient.PutAsync(url, reqContent);

				if (response.IsSuccessStatusCode == false)
				{
					throw new Exception($"An error({response.StatusCode}) was encountered attempting to PUT Expertise to {url}");
				}

				// The Response is a Person object, use it to update our Person variable
				var stringResult = await response.Content.ReadAsStringAsync();
				result = JsonConvert.DeserializeObject<Person>(stringResult, Json.JsonSerializerSettings);
			}

			// Everything updated, close the modal
			ConfirmModalClose = false;
			await Mf.Close();

			// Invoking after close because the two-way binding can cause hiccups in the ModalForm.
			await PersonChanged.InvokeAsync(result);

			// We've saved our changes reset the bools that dicate the ModalForms behavior.
			ResetForm();
		}
		catch (Exception ex)
		{
			Ex = ex;
		}
	}

	

	/*
		Still Need All This
	*/
	private class SuggestionItem
	{
		public double Count { get; set; }
		public string Name { get; set; }
	}

	private class SuggestionResponse
	{
		public List<SuggestionItem> Items { get; set; }
	}

	

	private void AddInterest(SuggestionItem item)
	{
		if (item == null || string.IsNullOrWhiteSpace(item.Name))
		{
			return;
		}

		// If item.Name includes a comma it is actually multiple interests at once.
		var newInterests = item.Name
			.Split(",")
			.Select(e => e.Trim().ToLower())
			.Where(e => string.IsNullOrWhiteSpace(e) == false);

		foreach (var i in newInterests)
		{
			if (ExpertiseAsList.Contains(i.Trim().ToLower()) == false)
			{
				ExpertiseAsList.Add(i.Trim().ToLower());
			}
		}
		StateHasChanged();

		// We've made a change, confirm before closing the modal without saving changes.
		ConfirmModalClose = true;
		// Ensure that the submit button is available.
		Mf.ForceValid();
	}

	private async Task<List<SuggestionItem>> GetSuggestions(string searchTerm)
	{
		var output = new List<SuggestionItem> { new SuggestionItem { Count =0, Name =  searchTerm.ToLower() } };
		// Using a new client instead of API so we don't send the users bearer token to Stack Exchange
		using (var client = new HttpClient())
		{
			var response = await client.GetAsync($"https://api.stackexchange.com/2.2/tags?order=desc&site=stackoverflow&min=4000&sort=popular&inname={HttpUtility.UrlEncode(searchTerm.ToLower())}");
			if (response.IsSuccessStatusCode)
			{
				var result = await response.Content.ReadFromJsonAsync<SuggestionResponse>();
				
				//Make sure the user's input is the first item in the list, with no duplicates.
				output.AddRange(result.Items.Where(i => i.Name.ToLower() != searchTerm.ToLower())) ;
			}
		}

		return output.Take(10).ToList();
	}

	public void Dispose() { }
}