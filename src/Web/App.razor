@using RivetBlazor.Classes
@using RivetBlazor.Components
@using System.Net
@using Newtonsoft.Json
@using Models
@using web.Shared
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager Navigation
@inject IHttpClientFactory ClientFactory

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
	<Found Context="routeData">
		<CascadingValue Value="@HeaderTitle">
			<CascadingValue Value="@NavLinks">
				<RouteView RouteData="@routeData" DefaultLayout="@typeof(RivetMainLayout)" />
			</CascadingValue>
		</CascadingValue>
	</Found>
	<NotFound>
		<CascadingValue Value="@HeaderTitle">
			<CascadingValue Value="@NavLinks">
				<LayoutView Layout="@typeof(RivetMainLayout)">
					<p>Sorry, there's nothing at this address.</p>
				</LayoutView>
			</CascadingValue>
		</CascadingValue>
	</NotFound>
</Router>
@code{
	public string HeaderTitle = "IT People";
	public List<IHeaderItem> NavLinks = new List<IHeaderItem>();
	private List<HeaderLink> ProfileLinks = new List<HeaderLink>();
	private AuthenticatedUser User = null;
	private string AuthenticationDestination;
	protected HttpClient Api() => ClientFactory.CreateClient("Api");

	protected override async Task OnInitializedAsync()
	{
		User = await localStorage.GetItemAsync<AuthenticatedUser>("user");
		if(User != null && User.Expires < DateTimeOffset.Now)
		{
			User = null;
		}
		var loggedInUser = User?.Username ?? "";
		var isLoggedIn = User != null;
		AuthenticationDestination = new Uri(Navigation.Uri).PathAndQuery;
		var signInUrl = $"/SignIn?Destination={System.Net.WebUtility.UrlEncode(AuthenticationDestination)}";
		
		// Build up NavLinks.
		NavLinks = new List<IHeaderItem>();
		RenderFragment avatar = null;
		if(isLoggedIn)
		{
			NavLinks.Add(new HeaderLink("/People", "People"));
			NavLinks.Add(new HeaderLink("/Units", "Units"));
			NavLinks.Add(new HeaderLink("/Search", "Search"));

			ProfileLinks.Insert(0, new HeaderLink($"/People/{loggedInUser}", "Profile", "Manage your profile information"));
			
			// Only admins need to see Notifications.
			var isAdmin = await PageBase.IsUserAdmin(User?.Username, Api());
			avatar = await GetNotifications(isAdmin);
			if(isAdmin)
			{
				ProfileLinks.Insert(0, new HeaderLink("/Notifications", "Notifications", "Review system notifications", avatar));
			}
		}

		NavLinks.Add(new HeaderProfile(loggedInUser, signInUrl, "/SignOut", ProfileLinks, null, isLoggedIn, avatar));
	}

	private async Task<RenderFragment> GetNotifications(bool isAdmin)
	{
		try
		{
			// Only admins see notifications.
			if(isAdmin)
			{
				// Fetch notifications that need reviewed.
				var resp = await Api().GetAsync("notifications");
				if(resp.StatusCode != HttpStatusCode.OK)
				{
					throw new Exception($"Failed to fatch Notifications.  Status Code: {resp.StatusCode}");
				}

				// The request succeeded, try to deserialize it.
				var stringResult = await resp.Content.ReadAsStringAsync();
				// We have to use Newtonsoft to make sure our StringEnumConverter work.
				var result = JsonConvert.DeserializeObject<List<Notification>>(stringResult, Json.JsonSerializerSettings);
				
				if(result.Count > 0)
				{
					return @<span class="rvt-badge rvt-badge--info rvt-m-right-xxs" aria-hidden="true">@result.Count</span>;
				}
			}
		}
		catch(Exception ex)
		{
			return @<span class="rvt-badge rvt-badge--danger rvt-m-right-xxs" aria-hidden="true" title=@ex.Message>!</span>;
		}

		return @<span style="display: none;" />;
	}
}