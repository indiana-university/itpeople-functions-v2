# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

variables:
  agentPool: 'CSSD-Linux-ELA'

resources:
  repositories:
  - repository: scripts
    type: githubenterprise
    name: UITS-SSL/azure-devops-scripts
    endpoint: 'IU GitHub Enterprise'

stages:
- stage: Test
  displayName: Test
  pool: $(agentPool)

  jobs: 
  - job: Unit
    steps:
    - task: UseDotNet@2
      inputs:
        version: 3.1.x

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: tests/API/Unit/Unit.csproj
          
  # - job: Integration
  #   steps:
  #   - task: UseDotNet@2
  #     inputs:
  #       version: 3.1.x

  #   - task: DotNetCoreCLI@2
  #     inputs:
  #       command: test
  #       projects: tests/API/Integration/Integration.csproj  

- stage: Package
  displayName: Package  
  dependsOn: []    # this removes the implicit dependency on Test stage and causes this to run in parallel
  pool: $(agentPool)

  jobs:
  - job: PackageWebApp
    displayName: Web App
    steps:
    - task: UseDotNet@2
      inputs:
        version: 5.0.x

    - task: DotNetCoreCLI@2
      name: PublishWebApp
      displayName: Publish Web App
      inputs:
        command: publish
        projects: src/Web/web.csproj
        arguments: --output $(Build.ArtifactStagingDirectory) --configuration Release
        publishWebProjects: false
        zipAfterPublish: false

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: WebAppDeploymentPackage
    # - task: DotNetCoreCLI@2
    #   displayName: Build Web App
    #   inputs:
    #     command: 'build'
    #     projects: src/Web/web.csproj
    #     arguments: --output $(System.DefaultWorkingDirectory)/WebApp --configuration Release
    
    # - task: ArchiveFiles@2
    #   displayName: 'Archive Web App files'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/WebApp'
    #     includeRootFolder: false
    #     archiveType: zip
    #     archiveFile: $(Build.ArtifactStagingDirectory)/WebApp.zip
    #     replaceExistingArchive: true

    # - publish: $(Build.ArtifactStagingDirectory)/WebApp.zip
    #   displayName: Publish Web App Artifacts
    #   artifact: WebAppDeploymentPackage
    
  - job: PackageApiApp
    displayName: API Function App
    steps:
    - task: UseDotNet@2
      inputs:
        version: 3.1.x
      
    - task: DotNetCoreCLI@2
      displayName: Build API
      inputs:
        command: 'build'
        projects: src/API/API.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/ApiFunctionApp --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive API files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/ApiFunctionApp'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/ApiFunctionApp.zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/ApiFunctionApp.zip
      displayName: Publish API Function App Artifacts
      artifact: ApiDeploymentPackage

  - job: PackageTasksApp
    displayName: Tasks Function App
    steps:
    - task: UseDotNet@2
      inputs:
        version: 3.1.x

    - task: DotNetCoreCLI@2
      displayName: Build Tasks
      inputs:
        command: 'build'
        projects: src/Tasks/Tasks.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/TasksFunctionApp --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive Tasks files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/TasksFunctionApp'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/TasksFunctionApp.zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/TasksFunctionApp.zip
      displayName: Publish Tasks Function App Artifacts
      artifact: TasksDeploymentPackage

- stage: Deploy
  displayName: Deploy
  pool: $(agentPool)
  # Deploy if this is not a feature branch, or if the commit message contains '/deploy'
  condition: or( not( contains( variables['Build.SourceBranch'], 'feature/' )), contains( variables['Build.SourceVersionMessage'], '/deploy' ) )
  dependsOn: 
    - Test
    - Package

  jobs:
  - job: WebApp
    steps:
    - checkout: scripts
    
    - task: DownloadPipelineArtifact@2
      displayName: Download Deployment Package
      inputs:
        artifact: 'WebAppDeploymentPackage'

    # - task: AzureCLI@2
    #   displayName: Publish to Azure Storage
    #   inputs:
    #     azureSubscription: '$(azureSubscription)'
    #     scriptType: bash
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       ##[command]az storage blob upload-batch -s $(Pipeline.Workspace)/WebAppDeploymentPackage -d '$web' --account-name $(webAppStorageAccountName) --auth-mode login
    #       az storage blob upload-batch -s $(Pipeline.Workspace)/WebAppDeploymentPackage -d '$web' --account-name $(webAppStorageAccountName) --auth-mode login

    # - task: AzureCLI@2
    #   displayName: Purge Azure CDN
    #   inputs:
    #     azureSubscription: '$(azureSubscription)'
    #     scriptType: bash
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       ##[command]az cdn endpoint purge --resource-group $(webAppCdnResourceGroup) --profile-name itpeople-ms-cdn --name $(webAppCdnEndpointName) --content-paths '/*' --no-wait
    #       az cdn endpoint purge --resource-group $(webAppCdnResourceGroup) --profile-name itpeople-ms-cdn --name $(webAppCdnEndpointName) --content-paths '/*' --no-wait
    # steps:
    # - checkout: scripts
    
    # - task: DownloadPipelineArtifact@2
    #   displayName: Download Deployment Package
    #   inputs:
    #     artifact: 'WebAppDeploymentPackage'
    
    - task: AzureCLI@2
      displayName: Deploy Web App
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: pscore
        scriptPath: $(Build.SourcesDirectory)/deploy-static-assets.ps1
        arguments: >-
          -StorageAccountName $(webAppStorageAccountName)
          -StorageContainer "`$web"
          -AssetsPath $(Pipeline.Workspace)/Web/wwwroot
          -CdnResourceGroup $(webAppCdnResourceGroup)
          -CdnProfileName $(webAppCdnProfileName)
          -CdnEndpointName $(webAppCdnEndpointName) 
   
  - job: API
    steps:
    - checkout: scripts

    - task: DownloadPipelineArtifact@2
      displayName: Download Deployment Package
      inputs:
        artifact: 'ApiDeploymentPackage'

    - task: AzureCLI@2
      displayName: Publish to Staging Slot
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: pscore
        scriptPath: $(Build.SourcesDirectory)/deploy-app-service.ps1
        arguments: >-
          -ResourceGroup $(resourceGroup) 
          -AppServiceName $(apiFunctionAppName) 
          -DeploymentSlot staging 
          -PackagePath $(Pipeline.Workspace)/ApiFunctionApp.zip 
          -HealthCheckPath "/ping"
    
    - task: AzureCLI@2
      displayName: Swap to Production Slot
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: pscore
        scriptPath: $(Build.SourcesDirectory)/swap-app-service.ps1
        arguments: >-
          -ResourceGroup $(resourceGroup) 
          -AppServiceName $(apiFunctionAppName) 
          -DeploymentSlot staging

  - job: Tasks
    steps:
    - checkout: scripts
    
    - task: DownloadPipelineArtifact@2
      displayName: Download Deployment Package
      inputs:
        artifact: 'TasksDeploymentPackage'

    - task: AzureFunctionApp@1
      displayName: Publish Tasks Function App
      inputs:
        azureSubscription: '$(azureSubscription)'
        appType: functionApp
        appName: '$(tasksFunctionAppName)'
        package: '$(Pipeline.Workspace)/TasksFunctionApp.zip'
              