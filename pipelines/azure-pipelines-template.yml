# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

parameters:
- name: VariableGroup
  type: string
  default: itpeople-functions-test

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'Azure - IU Print'
  # Agent VM image name
  vmImageName: 'ubuntu-20.04'

stages:
- stage: Build
  displayName: Build stage  
  
  jobs:
  - job: BuildSolution
    displayName: Build Solution
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build Solution
      inputs:
        command: build

  - job: PackageFunctionApp
    displayName: Package API Function App
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build API
      inputs:
        command: 'build'
        projects: src/API/API.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/ApiFunctionApp --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive API files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/ApiFunctionApp'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/ApiFunctionApp.zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/ApiFunctionApp.zip
      displayName: Publish API Web App Artifacts
      artifact: FunctionAppDrop

- stage: Test
  displayName: Test
  dependsOn: Build
  condition: succeeded()

  jobs: 
    - job: ApiTest
      displayName: API Tests
      pool:
        vmImage: $(vmImageName)

      steps:
        - task: DotNetCoreCLI@2
          displayName: Unit Tests
          inputs:
            command: test
            projects: tests/API/Unit/Unit.csproj
            
        - task: DotNetCoreCLI@2
          displayName: Integration Tests
          inputs:
            command: test
            projects: tests/API/Integration/Integration.csproj

  # - job: BuildFunctionApp
  #   displayName: Build Function App
  #   pool:
  #     vmImage: $(vmImageName)

  #   steps:
  #   - task: DotNetCoreCLI@2
  #     displayName: Build
  #     inputs:
  #       command: 'build'
  #       projects: src/functions/functions.csproj
  #       arguments: --output $(System.DefaultWorkingDirectory)/FunctionApp --configuration Release

  #   - task: ArchiveFiles@2
  #     displayName: 'Archive files'
  #     inputs:
  #       rootFolderOrFile: '$(System.DefaultWorkingDirectory)/FunctionApp'
  #       includeRootFolder: false
  #       archiveType: zip
  #       archiveFile: $(Build.ArtifactStagingDirectory)/FunctionApp.zip
  #       replaceExistingArchive: true

  #   - publish: $(Build.ArtifactStagingDirectory)/FunctionApp.zip
  #     displayName: Publish Web App Artifacts
  #     artifact: FunctionAppDrop

  # - job: TestFunctionApp
  #   displayName: Test Function App
  #   pool:
  #     vmImage: $(vmImageName)
  #   services:
  #     integrationTestDb: 'print-integration-test'

  #   steps:
  #   - task: DotNetCoreCLI@2
  #     displayName: Unit Test
  #     inputs:
  #       command: 'test'
  #       projects: tests/unit/unit.csproj

  #   - task: DotNetCoreCLI@2
  #     displayName: Integration Tests
  #     inputs:
  #       command: 'test'
  #       projects: tests/integration.api/integration.api.csproj

# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
#   condition: succeeded()

#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     environment: 'development'
#     pool:
#       vmImage: $(vmImageName)

#     strategy:
#       runOnce:
#         deploy:

#           steps:
#           - task: AzureFunctionApp@1
#             displayName: Publish Function App
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               appType: functionApp
#               appName: ${{ parameters.functionAppName }}
#               package: '$(Pipeline.Workspace)/FunctionAppDrop/FunctionApp.zip'
    
